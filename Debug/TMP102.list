
TMP102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a58  08006a58  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006a58  08006a58  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a58  08006a58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a50  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002782  00000000  00000000  00035af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00038278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dc9  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b85  00000000  00000000  0005c479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd606  00000000  00000000  00073ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141604  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000551c  00000000  00000000  00141654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069ac 	.word	0x080069ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080069ac 	.word	0x080069ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	ADCResult = HAL_ADC_GetValue (&hadc1);
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b06:	f001 f819 	bl	8001b3c <HAL_ADC_GetValue>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b0e:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ADCResult);
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b1a:	f001 ffc2 	bl	8002aa2 <HAL_DAC_SetValue>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b1e:	2120      	movs	r1, #32
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f002 fa20 	bl	8002f68 <HAL_GPIO_TogglePin>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	20000218 	.word	0x20000218
 8000b38:	200000dc 	.word	0x200000dc
 8000b3c:	00000000 	.word	0x00000000

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 fce9 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f8d5 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 fa89 	bl	8001064 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b52:	f000 fa57 	bl	8001004 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b56:	f000 f9c7 	bl	8000ee8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b5a:	f000 f929 	bl	8000db0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b5e:	f000 f999 	bl	8000e94 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000b62:	f000 fa01 	bl	8000f68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim2);    		// This function turns timer2 ON
 8000b66:	4858      	ldr	r0, [pc, #352]	; (8000cc8 <main+0x188>)
 8000b68:	f004 fbbe 	bl	80052e8 <HAL_TIM_Base_Start>
    HAL_ADC_Start_IT(&hadc1); 			// Start the ADC
 8000b6c:	4857      	ldr	r0, [pc, #348]	; (8000ccc <main+0x18c>)
 8000b6e:	f000 ff05 	bl	800197c <HAL_ADC_Start_IT>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start the DAC
 8000b72:	2100      	movs	r1, #0
 8000b74:	4856      	ldr	r0, [pc, #344]	; (8000cd0 <main+0x190>)
 8000b76:	f001 ffb9 	bl	8002aec <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Tell TMP102 that we want to read from the t register
	  buf[0] = REG_TEMP;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000b7e:	2390      	movs	r3, #144	; 0x90
 8000b80:	b299      	uxth	r1, r3
 8000b82:	1d3a      	adds	r2, r7, #4
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	4851      	ldr	r0, [pc, #324]	; (8000cd4 <main+0x194>)
 8000b8e:	f002 fa95 	bl	80030bc <HAL_I2C_Master_Transmit>
 8000b92:	4603      	mov	r3, r0
 8000b94:	757b      	strb	r3, [r7, #21]
	  if ( ret != HAL_OK ){
 8000b96:	7d7b      	ldrb	r3, [r7, #21]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d008      	beq.n	8000bae <main+0x6e>
		  strcpy((char*)buf, "Error Tx\r\n");
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4a4e      	ldr	r2, [pc, #312]	; (8000cd8 <main+0x198>)
 8000ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba2:	c303      	stmia	r3!, {r0, r1}
 8000ba4:	801a      	strh	r2, [r3, #0]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	0c12      	lsrs	r2, r2, #16
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e076      	b.n	8000c9c <main+0x15c>
	  } else{
		  //Read 2 bytes from the t register
		  ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000bae:	2390      	movs	r3, #144	; 0x90
 8000bb0:	b299      	uxth	r1, r3
 8000bb2:	1d3a      	adds	r2, r7, #4
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2302      	movs	r3, #2
 8000bbc:	4845      	ldr	r0, [pc, #276]	; (8000cd4 <main+0x194>)
 8000bbe:	f002 fb71 	bl	80032a4 <HAL_I2C_Master_Receive>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	757b      	strb	r3, [r7, #21]
		  if ( ret != HAL_OK ){
 8000bc6:	7d7b      	ldrb	r3, [r7, #21]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d008      	beq.n	8000bde <main+0x9e>
		  strcpy((char*)buf, "Error Rx\r\n");
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <main+0x19c>)
 8000bd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bd2:	c303      	stmia	r3!, {r0, r1}
 8000bd4:	801a      	strh	r2, [r3, #0]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	0c12      	lsrs	r2, r2, #16
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e05e      	b.n	8000c9c <main+0x15c>
		  } else{

		  //Combine the bytes
		  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000bde:	793b      	ldrb	r3, [r7, #4]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	82fb      	strh	r3, [r7, #22]

		  // Convert to 2's complement, since t can be negative
		  if( val > 0x7FF){
 8000bf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bf8:	db05      	blt.n	8000c06 <main+0xc6>
		  	  val |= 0xF000;
 8000bfa:	8afb      	ldrh	r3, [r7, #22]
 8000bfc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000c00:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000c04:	82fb      	strh	r3, [r7, #22]
		  }

		  // Convert the float t value (C)
		  temp_c = val * 0.0625;
 8000c06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc8a 	bl	8000524 <__aeabi_i2d>
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <main+0x1a0>)
 8000c16:	f7ff fcef 	bl	80005f8 <__aeabi_dmul>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4619      	mov	r1, r3
 8000c22:	f7ff ff1b 	bl	8000a5c <__aeabi_d2f>
 8000c26:	4603      	mov	r3, r0
 8000c28:	613b      	str	r3, [r7, #16]

		  //Convert to float t value format
		  temp_c*= 100;
 8000c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c2e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000ce4 <main+0x1a4>
 8000c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c36:	edc7 7a04 	vstr	s15, [r7, #16]
		  sprintf((char*)buf,
				  "%u.%02u C, %u\r\n",
				  ((unsigned int)temp_c / 100),
 8000c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c42:	ee17 2a90 	vmov	r2, s15
		  sprintf((char*)buf,
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <main+0x1a8>)
 8000c48:	fba3 2302 	umull	r2, r3, r3, r2
 8000c4c:	095d      	lsrs	r5, r3, #5
				  ((unsigned int)temp_c % 100),
 8000c4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c56:	ee17 2a90 	vmov	r2, s15
		  sprintf((char*)buf,
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <main+0x1a8>)
 8000c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c60:	095c      	lsrs	r4, r3, #5
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	fb04 f303 	mul.w	r3, r4, r3
 8000c68:	1ad4      	subs	r4, r2, r3
				  ((unsigned int)((ADCResult-150)/2.15)));
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <main+0x1ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b96      	subs	r3, #150	; 0x96
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc47 	bl	8000504 <__aeabi_ui2d>
 8000c76:	a312      	add	r3, pc, #72	; (adr r3, 8000cc0 <main+0x180>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	f7ff fde6 	bl	800084c <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
		  sprintf((char*)buf,
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f7ff fec8 	bl	8000a1c <__aeabi_d2uiz>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	1d38      	adds	r0, r7, #4
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4623      	mov	r3, r4
 8000c94:	462a      	mov	r2, r5
 8000c96:	4916      	ldr	r1, [pc, #88]	; (8000cf0 <main+0x1b0>)
 8000c98:	f005 fa1a 	bl	80060d0 <siprintf>

		  }
	  }
	  // Send out buffer
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa96 	bl	80001d0 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	1d39      	adds	r1, r7, #4
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <main+0x1b4>)
 8000cb0:	f004 fe06 	bl	80058c0 <HAL_UART_Transmit>
	  //Wait
	  HAL_Delay(500);
 8000cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb8:	f000 fc96 	bl	80015e8 <HAL_Delay>
	  buf[0] = REG_TEMP;
 8000cbc:	e75d      	b.n	8000b7a <main+0x3a>
 8000cbe:	bf00      	nop
 8000cc0:	33333333 	.word	0x33333333
 8000cc4:	40013333 	.word	0x40013333
 8000cc8:	20000144 	.word	0x20000144
 8000ccc:	2000008c 	.word	0x2000008c
 8000cd0:	200000dc 	.word	0x200000dc
 8000cd4:	200000f0 	.word	0x200000f0
 8000cd8:	080069c4 	.word	0x080069c4
 8000cdc:	080069d0 	.word	0x080069d0
 8000ce0:	3fb00000 	.word	0x3fb00000
 8000ce4:	42c80000 	.word	0x42c80000
 8000ce8:	51eb851f 	.word	0x51eb851f
 8000cec:	20000218 	.word	0x20000218
 8000cf0:	080069dc 	.word	0x080069dc
 8000cf4:	20000190 	.word	0x20000190

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d02:	2228      	movs	r2, #40	; 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 f9da 	bl	80060c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d32:	2301      	movs	r3, #1
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d36:	2310      	movs	r3, #16
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fec9 	bl	8003ae4 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d58:	f000 f9ea 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fef1 	bl	8004b60 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d84:	f000 f9d4 	bl	8001130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000d88:	23a0      	movs	r3, #160	; 0xa0
 8000d8a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 f917 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000da4:	f000 f9c4 	bl	8001130 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3758      	adds	r7, #88	; 0x58
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000dd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de0:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e04:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e32:	f000 fc11 	bl	8001658 <HAL_ADC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e3c:	f000 f978 	bl	8001130 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e4c:	f001 fb66 	bl	800251c <HAL_ADCEx_MultiModeConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e56:	f000 f96b 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_ADC1_Init+0xe0>)
 8000e78:	f001 f890 	bl	8001f9c <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000e82:	f000 f955 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000008c 	.word	0x2000008c

08000e94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_DAC1_Init+0x4c>)
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <MX_DAC1_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_DAC1_Init+0x4c>)
 8000eac:	f001 fdd7 	bl	8002a5e <HAL_DAC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000eb6:	f000 f93b 	bl	8001130 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_DAC1_Init+0x4c>)
 8000eca:	f001 fe5b 	bl	8002b84 <HAL_DAC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000ed4:	f000 f92c 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000dc 	.word	0x200000dc
 8000ee4:	40007400 	.word	0x40007400

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_I2C1_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <MX_I2C1_Init+0x7c>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f24:	f002 f83a 	bl	8002f9c <HAL_I2C_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2e:	f000 f8ff 	bl	8001130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f36:	f002 fd3d 	bl	80039b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 f8f6 	bl	8001130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f48:	f002 fd7f 	bl	8003a4a <HAL_I2CEx_ConfigDigitalFilter>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f000 f8ed 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000f0 	.word	0x200000f0
 8000f60:	40005400 	.word	0x40005400
 8000f64:	2000090e 	.word	0x2000090e

08000f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000000;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <MX_TIM2_Init+0x98>)
 8000f9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fae:	f004 f943 	bl	8005238 <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fb8:	f000 f8ba 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fca:	f004 f9e1 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd4:	f000 f8ac 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM2_Init+0x94>)
 8000fe6:	f004 fbaf 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f000 f89e 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000144 	.word	0x20000144
 8001000:	03d09000 	.word	0x03d09000

08001004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USART2_UART_Init+0x58>)
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <MX_USART2_UART_Init+0x5c>)
 800100c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001010:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART2_UART_Init+0x58>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART2_UART_Init+0x58>)
 8001048:	f004 fbec 	bl	8005824 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001052:	f000 f86d 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000190 	.word	0x20000190
 8001060:	40004400 	.word	0x40004400

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_GPIO_Init+0xc4>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <MX_GPIO_Init+0xc4>)
 8001080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_GPIO_Init+0xc4>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_GPIO_Init+0xc4>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <MX_GPIO_Init+0xc4>)
 8001098:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_GPIO_Init+0xc4>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 ff29 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <MX_GPIO_Init+0xc8>)
 80010fe:	f001 fda9 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001102:	2320      	movs	r3, #32
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f001 fd9a 	bl	8002c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000
 800112c:	48000800 	.word	0x48000800

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x44>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x44>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x44>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x44>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x44>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x44>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001172:	2007      	movs	r0, #7
 8001174:	f001 fc32 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a4:	d12c      	bne.n	8001200 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_ADC_MspInit+0x84>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_ADC_MspInit+0x84>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_ADC_MspInit+0x84>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_ADC_MspInit+0x84>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_ADC_MspInit+0x84>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_ADC_MspInit+0x84>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f001 fd32 	bl	8002c54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2012      	movs	r0, #18
 80011f6:	f001 fbfc 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011fa:	2012      	movs	r0, #18
 80011fc:	f001 fc15 	bl	8002a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_DAC_MspInit+0x74>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d124      	bne.n	8001278 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_DAC_MspInit+0x78>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <HAL_DAC_MspInit+0x78>)
 8001234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_DAC_MspInit+0x78>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_DAC_MspInit+0x78>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_DAC_MspInit+0x78>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_DAC_MspInit+0x78>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800125e:	2310      	movs	r3, #16
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f001 fcee 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40007400 	.word	0x40007400
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_I2C_MspInit+0x7c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d128      	bne.n	80012fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_I2C_MspInit+0x80>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_I2C_MspInit+0x80>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_I2C_MspInit+0x80>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d4:	2304      	movs	r3, #4
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <HAL_I2C_MspInit+0x84>)
 80012e0:	f001 fcb8 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_I2C_MspInit+0x80>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_I2C_MspInit+0x80>)
 80012ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ee:	61d3      	str	r3, [r2, #28]
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_I2C_MspInit+0x80>)
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40005400 	.word	0x40005400
 8001308:	40021000 	.word	0x40021000
 800130c:	48000400 	.word	0x48000400

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001320:	d10b      	bne.n	800133a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_TIM_Base_MspInit+0x38>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_TIM_Base_MspInit+0x38>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_TIM_Base_MspInit+0x38>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_UART_MspInit+0x7c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d128      	bne.n	80013c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_UART_MspInit+0x80>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <HAL_UART_MspInit+0x80>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_UART_MspInit+0x80>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_UART_MspInit+0x80>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_UART_MspInit+0x80>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_UART_MspInit+0x80>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800139e:	230c      	movs	r3, #12
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ae:	2307      	movs	r3, #7
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f001 fc4a 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004400 	.word	0x40004400
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 f8c4 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <ADC1_2_IRQHandler+0x10>)
 800142a:	f000 fb95 	bl	8001b58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000008c 	.word	0x2000008c

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f004 fe00 	bl	800606c <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20003000 	.word	0x20003000
 8001498:	00000400 	.word	0x00000400
 800149c:	2000021c 	.word	0x2000021c
 80014a0:	20000238 	.word	0x20000238

080014a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f004 fdbf 	bl	8006078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff fb21 	bl	8000b40 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001500:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800150c:	08006a60 	.word	0x08006a60
  ldr r2, =_sbss
 8001510:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001514:	20000234 	.word	0x20000234

08001518 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <CAN_RX0_IRQHandler>
	...

0800151c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x28>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x28>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f001 fa55 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fe00 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fa6d 	bl	8002a46 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f001 fa35 	bl	80029f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000220 	.word	0x20000220

080015d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000220 	.word	0x20000220

080015e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09a      	sub	sp, #104	; 0x68
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e172      	b.n	800195e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d176      	bne.n	8001778 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d152      	bne.n	8001738 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fd69 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d13b      	bne.n	8001738 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 f855 	bl	8002770 <ADC_Disable>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d12f      	bne.n	8001738 <HAL_ADC_Init+0xe0>
 80016d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12b      	bne.n	8001738 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e8:	f023 0302 	bic.w	r3, r3, #2
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001702:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001712:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001714:	4b94      	ldr	r3, [pc, #592]	; (8001968 <HAL_ADC_Init+0x310>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a94      	ldr	r2, [pc, #592]	; (800196c <HAL_ADC_Init+0x314>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9a      	lsrs	r2, r3, #18
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800172a:	e002      	b.n	8001732 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3b01      	subs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f9      	bne.n	800172c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001754:	d110      	bne.n	8001778 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f023 0312 	bic.w	r3, r3, #18
 800175e:	f043 0210 	orr.w	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 80df 	bne.w	8001944 <HAL_ADC_Init+0x2ec>
 8001786:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 80da 	bne.w	8001944 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 80d2 	bne.w	8001944 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b0:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_ADC_Init+0x318>)
 80017b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017bc:	d102      	bne.n	80017c4 <HAL_ADC_Init+0x16c>
 80017be:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_ADC_Init+0x31c>)
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e002      	b.n	80017ca <HAL_ADC_Init+0x172>
 80017c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017c8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_ADC_Init+0x192>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Init+0x192>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_ADC_Init+0x194>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11c      	bne.n	800182a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_ADC_Init+0x1ba>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x1ba>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_ADC_Init+0x1bc>
 8001812:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001828:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7e5b      	ldrb	r3, [r3, #25]
 800182e:	035b      	lsls	r3, r3, #13
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001834:	2a01      	cmp	r2, #1
 8001836:	d002      	beq.n	800183e <HAL_ADC_Init+0x1e6>
 8001838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800183c:	e000      	b.n	8001840 <HAL_ADC_Init+0x1e8>
 800183e:	2200      	movs	r2, #0
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4313      	orrs	r3, r2
 800184e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001850:	4313      	orrs	r3, r2
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d11b      	bne.n	8001896 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7e5b      	ldrb	r3, [r3, #25]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	3b01      	subs	r3, #1
 800186c:	045a      	lsls	r2, r3, #17
 800186e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001870:	4313      	orrs	r3, r2
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	663b      	str	r3, [r7, #96]	; 0x60
 8001878:	e00d      	b.n	8001896 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001882:	f043 0220 	orr.w	r2, r3, #32
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	2b01      	cmp	r3, #1
 800189c:	d007      	beq.n	80018ae <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	4313      	orrs	r3, r2
 80018a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018aa:	4313      	orrs	r3, r2
 80018ac:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d114      	bne.n	80018e6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ca:	f023 0302 	bic.w	r3, r3, #2
 80018ce:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7e1b      	ldrb	r3, [r3, #24]
 80018d4:	039a      	lsls	r2, r3, #14
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4313      	orrs	r3, r2
 80018e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e2:	4313      	orrs	r3, r2
 80018e4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_ADC_Init+0x320>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018f6:	430b      	orrs	r3, r1
 80018f8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10c      	bne.n	800191c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	f023 010f 	bic.w	r1, r3, #15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
 800191a:	e007      	b.n	800192c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020f 	bic.w	r2, r2, #15
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
 8001942:	e00a      	b.n	800195a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f023 0312 	bic.w	r3, r3, #18
 800194c:	f043 0210 	orr.w	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001954:	2301      	movs	r3, #1
 8001956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800195a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800195e:	4618      	mov	r0, r3
 8001960:	3768      	adds	r7, #104	; 0x68
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000
 800196c:	431bde83 	.word	0x431bde83
 8001970:	50000300 	.word	0x50000300
 8001974:	50000100 	.word	0x50000100
 8001978:	fff0c007 	.word	0xfff0c007

0800197c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80c6 	bne.w	8001b24 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Start_IT+0x2a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e0c1      	b.n	8001b2a <HAL_ADC_Start_IT+0x1ae>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fe7a 	bl	80026a8 <ADC_Enable>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80ad 	bne.w	8001b1a <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019d4:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HAL_ADC_Start_IT+0x1b8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_ADC_Start_IT+0x6e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e8:	d115      	bne.n	8001a16 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d027      	beq.n	8001a54 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a14:	e01e      	b.n	8001a54 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Start_IT+0xba>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a41      	ldr	r2, [pc, #260]	; (8001b38 <HAL_ADC_Start_IT+0x1bc>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10e      	bne.n	8001a54 <HAL_ADC_Start_IT+0xd8>
 8001a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f023 0206 	bic.w	r2, r3, #6
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a6e:	e002      	b.n	8001a76 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	221c      	movs	r2, #28
 8001a84:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d110      	bne.n	8001ab0 <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0204 	bic.w	r2, r2, #4
 8001a9c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0208 	orr.w	r2, r2, #8
 8001aac:	605a      	str	r2, [r3, #4]
          break;
 8001aae:	e008      	b.n	8001ac2 <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 020c 	orr.w	r2, r2, #12
 8001abe:	605a      	str	r2, [r3, #4]
          break;
 8001ac0:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0210 	bic.w	r2, r2, #16
 8001ad8:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_ADC_Start_IT+0x1b8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <HAL_ADC_Start_IT+0x18c>
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_ADC_Start_IT+0x1b8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d00a      	beq.n	8001b08 <HAL_ADC_Start_IT+0x18c>
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_ADC_Start_IT+0x1b8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_Start_IT+0x18c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d10f      	bne.n	8001b28 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0204 	orr.w	r2, r2, #4
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e006      	b.n	8001b28 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b22:	e001      	b.n	8001b28 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
 8001b26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	50000300 	.word	0x50000300
 8001b38:	50000100 	.word	0x50000100

08001b3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_ADC_IRQHandler+0x38>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d076      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d071      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001bbc:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_ADC_IRQHandler+0x92>
 8001bc8:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d00a      	beq.n	8001bea <HAL_ADC_IRQHandler+0x92>
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d004      	beq.n	8001bea <HAL_ADC_IRQHandler+0x92>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d104      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e003      	b.n	8001bfc <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d137      	bne.n	8001c7a <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d132      	bne.n	8001c7a <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02d      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11a      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 020c 	bic.w	r2, r2, #12
 8001c3a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d112      	bne.n	8001c7a <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c60:	e00b      	b.n	8001c7a <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe ff3e 	bl	8000afc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	220c      	movs	r2, #12
 8001c86:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x144>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80a5 	beq.w	8001df2 <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 809f 	beq.w	8001df2 <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001cc0:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_ADC_IRQHandler+0x196>
 8001ccc:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d00a      	beq.n	8001cee <HAL_ADC_IRQHandler+0x196>
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d004      	beq.n	8001cee <HAL_ADC_IRQHandler+0x196>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cec:	d104      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d16a      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d15e      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d159      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d054      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d010      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x210>
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d00a      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x210>
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_ADC_IRQHandler+0x270>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2b07      	cmp	r3, #7
 8001d5c:	d004      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x210>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d66:	d104      	bne.n	8001d72 <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d12f      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11c      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001da0:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d114      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc6:	e00d      	b.n	8001de4 <HAL_ADC_IRQHandler+0x28c>
 8001dc8:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0210 	orr.w	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8b1 	bl	8001f4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2260      	movs	r2, #96	; 0x60
 8001df0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d011      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x2c8>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fc0c 	bl	8001630 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x2f8>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00d      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f897 	bl	8001f74 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d012      	beq.n	8001e80 <HAL_ADC_IRQHandler+0x328>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f889 	bl	8001f88 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03b      	beq.n	8001f02 <HAL_ADC_IRQHandler+0x3aa>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d036      	beq.n	8001f02 <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	e019      	b.n	8001ed6 <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_ADC_IRQHandler+0x3f0>)
 8001ea4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	e007      	b.n	8001ed6 <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10e      	bne.n	8001efa <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f043 0202 	orr.w	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fba5 	bl	8001644 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2210      	movs	r2, #16
 8001f00:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d018      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x3e6>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d013      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f043 0208 	orr.w	r2, r3, #8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f36:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f811 	bl	8001f60 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001f3e:	bf00      	nop
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	50000300 	.word	0x50000300

08001f4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b09b      	sub	sp, #108	; 0x6c
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x22>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e2a4      	b.n	8002508 <HAL_ADC_ConfigChannel+0x56c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 8288 	bne.w	80024e6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d81c      	bhi.n	8002018 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4019      	ands	r1, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
 8002016:	e063      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b09      	cmp	r3, #9
 800201e:	d81e      	bhi.n	800205e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	3b1e      	subs	r3, #30
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	4019      	ands	r1, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	3b1e      	subs	r3, #30
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	635a      	str	r2, [r3, #52]	; 0x34
 800205c:	e040      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b0e      	cmp	r3, #14
 8002064:	d81e      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	3b3c      	subs	r3, #60	; 0x3c
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	3b3c      	subs	r3, #60	; 0x3c
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
 80020a2:	e01d      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	3b5a      	subs	r3, #90	; 0x5a
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	4019      	ands	r1, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	3b5a      	subs	r3, #90	; 0x5a
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 80e5 	bne.w	80022ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d91c      	bls.n	8002132 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6999      	ldr	r1, [r3, #24]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	3b1e      	subs	r3, #30
 800210a:	2207      	movs	r2, #7
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	4019      	ands	r1, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6898      	ldr	r0, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	3b1e      	subs	r3, #30
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	619a      	str	r2, [r3, #24]
 8002130:	e019      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6959      	ldr	r1, [r3, #20]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	2207      	movs	r2, #7
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	4019      	ands	r1, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6898      	ldr	r0, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	fa00 f203 	lsl.w	r2, r0, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	3b01      	subs	r3, #1
 8002184:	2b03      	cmp	r3, #3
 8002186:	d84f      	bhi.n	8002228 <HAL_ADC_ConfigChannel+0x28c>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <HAL_ADC_ConfigChannel+0x1f4>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a1 	.word	0x080021a1
 8002194:	080021c3 	.word	0x080021c3
 8002198:	080021e5 	.word	0x080021e5
 800219c:	08002207 	.word	0x08002207
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021a6:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <HAL_ADC_ConfigChannel+0x45c>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	0691      	lsls	r1, r2, #26
 80021b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b2:	430a      	orrs	r2, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021c0:	e07e      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021c8:	4b8b      	ldr	r3, [pc, #556]	; (80023f8 <HAL_ADC_ConfigChannel+0x45c>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	0691      	lsls	r1, r2, #26
 80021d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021d4:	430a      	orrs	r2, r1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021e2:	e06d      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ea:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <HAL_ADC_ConfigChannel+0x45c>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	0691      	lsls	r1, r2, #26
 80021f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021f6:	430a      	orrs	r2, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002202:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002204:	e05c      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800220c:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <HAL_ADC_ConfigChannel+0x45c>)
 800220e:	4013      	ands	r3, r2
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	0691      	lsls	r1, r2, #26
 8002216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002218:	430a      	orrs	r2, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002224:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002226:	e04b      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	429a      	cmp	r2, r3
 800225e:	d107      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800226e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002292:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d10a      	bne.n	80022be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80022b8:	e001      	b.n	80022be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80022ba:	bf00      	nop
 80022bc:	e000      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80022be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d108      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x344>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x344>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x346>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 810a 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d00f      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800230e:	e049      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2201      	movs	r2, #1
 800231e:	409a      	lsls	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b09      	cmp	r3, #9
 8002330:	d91c      	bls.n	800236c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6999      	ldr	r1, [r3, #24]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	3b1b      	subs	r3, #27
 8002344:	2207      	movs	r2, #7
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	4019      	ands	r1, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6898      	ldr	r0, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1b      	subs	r3, #27
 800235e:	fa00 f203 	lsl.w	r2, r0, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	619a      	str	r2, [r3, #24]
 800236a:	e01b      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6959      	ldr	r1, [r3, #20]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	4019      	ands	r1, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6898      	ldr	r0, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	fa00 f203 	lsl.w	r2, r0, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_ADC_ConfigChannel+0x460>)
 80023a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d015      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023c0:	2b11      	cmp	r3, #17
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00b      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	f040 8091 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80023da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 808a 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f0:	d108      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x468>
 80023f2:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_ADC_ConfigChannel+0x464>)
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e008      	b.n	800240a <HAL_ADC_ConfigChannel+0x46e>
 80023f8:	83fff000 	.word	0x83fff000
 80023fc:	50000300 	.word	0x50000300
 8002400:	50000100 	.word	0x50000100
 8002404:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002408:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_ADC_ConfigChannel+0x48e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x48e>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_ADC_ConfigChannel+0x490>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d150      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002430:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x4b6>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x4b6>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_ADC_ConfigChannel+0x4b8>
 8002452:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002454:	2b00      	cmp	r3, #0
 8002456:	d13c      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b10      	cmp	r3, #16
 800245e:	d11d      	bne.n	800249c <HAL_ADC_ConfigChannel+0x500>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002468:	d118      	bne.n	800249c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800246a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002474:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_ADC_ConfigChannel+0x578>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_ADC_ConfigChannel+0x57c>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	0c9a      	lsrs	r2, r3, #18
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800248c:	e002      	b.n	8002494 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3b01      	subs	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800249a:	e02e      	b.n	80024fa <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b11      	cmp	r3, #17
 80024a2:	d10b      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x520>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80024b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024ba:	e01e      	b.n	80024fa <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	d11a      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024d0:	e013      	b.n	80024fa <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024e4:	e00a      	b.n	80024fc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024f8:	e000      	b.n	80024fc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024fa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002508:	4618      	mov	r0, r3
 800250a:	376c      	adds	r7, #108	; 0x6c
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000000 	.word	0x20000000
 8002518:	431bde83 	.word	0x431bde83

0800251c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800251c:	b480      	push	{r7}
 800251e:	b099      	sub	sp, #100	; 0x64
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002534:	d102      	bne.n	800253c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002536:	4b5a      	ldr	r3, [pc, #360]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	e002      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800253c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002540:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0a2      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002556:	2302      	movs	r3, #2
 8002558:	e09b      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d17f      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d179      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257c:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800257e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d040      	beq.n	800260a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800259a:	035b      	lsls	r3, r3, #13
 800259c:	430b      	orrs	r3, r1
 800259e:	431a      	orrs	r2, r3
 80025a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d15c      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80025e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d14b      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025f4:	f023 030f 	bic.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6892      	ldr	r2, [r2, #8]
 8002600:	430a      	orrs	r2, r1
 8002602:	431a      	orrs	r2, r3
 8002604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002606:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002608:	e03c      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800260a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002614:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d123      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002658:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d112      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800265e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002666:	f023 030f 	bic.w	r3, r3, #15
 800266a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800266c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800266e:	e009      	b.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002682:	e000      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002684:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800268e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002692:	4618      	mov	r0, r3
 8002694:	3764      	adds	r7, #100	; 0x64
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	50000100 	.word	0x50000100
 80026a4:	50000300 	.word	0x50000300

080026a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <ADC_Enable+0x2c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <ADC_Enable+0x2c>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <ADC_Enable+0x2e>
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d143      	bne.n	8002762 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <ADC_Enable+0xc4>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f043 0210 	orr.w	r2, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e02f      	b.n	8002764 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002714:	f7fe ff5c 	bl	80015d0 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800271a:	e01b      	b.n	8002754 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800271c:	f7fe ff58 	bl	80015d0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d914      	bls.n	8002754 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00d      	beq.n	8002754 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1dc      	bne.n	800271c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	8000003f 	.word	0x8000003f

08002770 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <ADC_Disable+0x2c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <ADC_Disable+0x2c>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <ADC_Disable+0x2e>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d047      	beq.n	8002832 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030d 	and.w	r3, r3, #13
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10f      	bne.n	80027d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0202 	orr.w	r2, r2, #2
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2203      	movs	r2, #3
 80027c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027c8:	f7fe ff02 	bl	80015d0 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027ce:	e029      	b.n	8002824 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e023      	b.n	8002834 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ec:	f7fe fef0 	bl	80015d0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d914      	bls.n	8002824 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10d      	bne.n	8002824 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d0dc      	beq.n	80027ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <__NVIC_SetPriorityGrouping+0x44>)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60d3      	str	r3, [r2, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <__NVIC_GetPriorityGrouping+0x18>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0307 	and.w	r3, r3, #7
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db0b      	blt.n	80028ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4907      	ldr	r1, [pc, #28]	; (80028d8 <__NVIC_EnableIRQ+0x38>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2001      	movs	r0, #1
 80028c2:	fa00 f202 	lsl.w	r2, r0, r2
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	; (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	; (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff8e 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff29 	bl	800283c <__NVIC_SetPriorityGrouping>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a04:	f7ff ff3e 	bl	8002884 <__NVIC_GetPriorityGrouping>
 8002a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff ff8e 	bl	8002930 <NVIC_EncodePriority>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff5d 	bl	80028dc <__NVIC_SetPriority>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff31 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffa2 	bl	8002998 <SysTick_Config>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e014      	b.n	8002a9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fe fbc3 	bl	800120c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002aa2:	b480      	push	{r7}
 8002aa4:	b087      	sub	sp, #28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e004      	b.n	8002ad6 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	795b      	ldrb	r3, [r3, #5]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_DAC_Start+0x16>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e039      	b.n	8002b76 <HAL_DAC_Start+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10f      	bne.n	8002b48 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002b32:	2b3c      	cmp	r3, #60	; 0x3c
 8002b34:	d118      	bne.n	8002b68 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e00f      	b.n	8002b68 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b52:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8002b56:	d107      	bne.n	8002b68 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0202 	orr.w	r2, r2, #2
 8002b66:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	795b      	ldrb	r3, [r3, #5]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DAC_ConfigChannel+0x20>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04e      	b.n	8002c42 <HAL_DAC_ConfigChannel+0xbe>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2202      	movs	r2, #2
 8002bae:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <HAL_DAC_ConfigChannel+0xcc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d112      	bne.n	8002be8 <HAL_DAC_ConfigChannel+0x64>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10f      	bne.n	8002be8 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002bc8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e00e      	b.n	8002c06 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002be8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	22c0      	movs	r2, #192	; 0xc0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40007400 	.word	0x40007400

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e14e      	b.n	8002f02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8140 	beq.w	8002efc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d005      	beq.n	8002c94 <HAL_GPIO_Init+0x40>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 0201 	and.w	r2, r3, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d123      	bne.n	8002d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0203 	and.w	r2, r3, #3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 809a 	beq.w	8002efc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a54      	ldr	r2, [pc, #336]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002de0:	4a50      	ldr	r2, [pc, #320]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e0a:	d013      	beq.n	8002e34 <HAL_GPIO_Init+0x1e0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <HAL_GPIO_Init+0x2d4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <HAL_GPIO_Init+0x1dc>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_GPIO_Init+0x2d8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1d8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <HAL_GPIO_Init+0x2dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_GPIO_Init+0x1d4>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e28:	2305      	movs	r3, #5
 8002e2a:	e004      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e34:	2300      	movs	r3, #0
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	f002 0203 	and.w	r2, r2, #3
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e46:	4937      	ldr	r1, [pc, #220]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e54:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e78:	4a2e      	ldr	r2, [pc, #184]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f aea9 	bne.w	8002c64 <HAL_GPIO_Init+0x10>
  }
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	48000800 	.word	0x48000800
 8002f30:	48000c00 	.word	0x48000c00
 8002f34:	40010400 	.word	0x40010400

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43d9      	mvns	r1, r3
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e081      	b.n	80030b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fe f960 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e006      	b.n	8003024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d104      	bne.n	8003036 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
 80030cc:	4613      	mov	r3, r2
 80030ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	f040 80da 	bne.w	8003292 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_I2C_Master_Transmit+0x30>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0d3      	b.n	8003294 <HAL_I2C_Master_Transmit+0x1d8>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030f4:	f7fe fa6c 	bl	80015d0 <HAL_GetTick>
 80030f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2319      	movs	r3, #25
 8003100:	2201      	movs	r2, #1
 8003102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f9e6 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0be      	b.n	8003294 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2210      	movs	r2, #16
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2bff      	cmp	r3, #255	; 0xff
 8003146:	d90e      	bls.n	8003166 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	b2da      	uxtb	r2, r3
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	4b51      	ldr	r3, [pc, #324]	; (800329c <HAL_I2C_Master_Transmit+0x1e0>)
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fbf6 	bl	8003950 <I2C_TransferConfig>
 8003164:	e06c      	b.n	8003240 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	b2da      	uxtb	r2, r3
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	4b48      	ldr	r3, [pc, #288]	; (800329c <HAL_I2C_Master_Transmit+0x1e0>)
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fbe5 	bl	8003950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003186:	e05b      	b.n	8003240 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	6a39      	ldr	r1, [r7, #32]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f9f2 	bl	8003576 <I2C_WaitOnTXISFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e07b      	b.n	8003294 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d034      	beq.n	8003240 <HAL_I2C_Master_Transmit+0x184>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d130      	bne.n	8003240 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f975 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04d      	b.n	8003294 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2bff      	cmp	r3, #255	; 0xff
 8003200:	d90e      	bls.n	8003220 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	22ff      	movs	r2, #255	; 0xff
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8979      	ldrh	r1, [r7, #10]
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fb99 	bl	8003950 <I2C_TransferConfig>
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	b2da      	uxtb	r2, r3
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb88 	bl	8003950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d19e      	bne.n	8003188 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f9d8 	bl	8003604 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e01a      	b.n	8003294 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2220      	movs	r2, #32
 8003264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003272:	400b      	ands	r3, r1
 8003274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	80002000 	.word	0x80002000
 80032a0:	fe00e800 	.word	0xfe00e800

080032a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	460b      	mov	r3, r1
 80032b2:	817b      	strh	r3, [r7, #10]
 80032b4:	4613      	mov	r3, r2
 80032b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	f040 80db 	bne.w	800347c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2C_Master_Receive+0x30>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0d4      	b.n	800347e <HAL_I2C_Master_Receive+0x1da>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032dc:	f7fe f978 	bl	80015d0 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2319      	movs	r3, #25
 80032e8:	2201      	movs	r2, #1
 80032ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8f2 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0bf      	b.n	800347e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2222      	movs	r2, #34	; 0x22
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2210      	movs	r2, #16
 800330a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2bff      	cmp	r3, #255	; 0xff
 800332e:	d90e      	bls.n	800334e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	4b52      	ldr	r3, [pc, #328]	; (8003488 <HAL_I2C_Master_Receive+0x1e4>)
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fb02 	bl	8003950 <I2C_TransferConfig>
 800334c:	e06d      	b.n	800342a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	b2da      	uxtb	r2, r3
 800335e:	8979      	ldrh	r1, [r7, #10]
 8003360:	4b49      	ldr	r3, [pc, #292]	; (8003488 <HAL_I2C_Master_Receive+0x1e4>)
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 faf1 	bl	8003950 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800336e:	e05c      	b.n	800342a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	6a39      	ldr	r1, [r7, #32]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f989 	bl	800368c <I2C_WaitOnRXNEFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e07c      	b.n	800347e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d034      	beq.n	800342a <HAL_I2C_Master_Receive+0x186>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d130      	bne.n	800342a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f880 	bl	80034d8 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e04d      	b.n	800347e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2bff      	cmp	r3, #255	; 0xff
 80033ea:	d90e      	bls.n	800340a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	22ff      	movs	r2, #255	; 0xff
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	8979      	ldrh	r1, [r7, #10]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 faa4 	bl	8003950 <I2C_TransferConfig>
 8003408:	e00f      	b.n	800342a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	b2da      	uxtb	r2, r3
 800341a:	8979      	ldrh	r1, [r7, #10]
 800341c:	2300      	movs	r3, #0
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fa93 	bl	8003950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d19d      	bne.n	8003370 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	6a39      	ldr	r1, [r7, #32]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f8e3 	bl	8003604 <I2C_WaitOnSTOPFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e01a      	b.n	800347e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2220      	movs	r2, #32
 800344e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_I2C_Master_Receive+0x1e8>)
 800345c:	400b      	ands	r3, r1
 800345e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	80002400 	.word	0x80002400
 800348c:	fe00e800 	.word	0xfe00e800

08003490 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d103      	bne.n	80034ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d007      	beq.n	80034cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	619a      	str	r2, [r3, #24]
  }
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	e031      	b.n	800354e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d02d      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fe f86d 	bl	80015d0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d122      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	429a      	cmp	r2, r3
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	429a      	cmp	r2, r3
 8003524:	d113      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	429a      	cmp	r2, r3
 800356a:	d0be      	beq.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003582:	e033      	b.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f901 	bl	8003790 <I2C_IsErrorOccurred>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e031      	b.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d025      	beq.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fe f816 	bl	80015d0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11a      	bne.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d013      	beq.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d1c4      	bne.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003610:	e02f      	b.n	8003672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8ba 	bl	8003790 <I2C_IsErrorOccurred>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02d      	b.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fd ffd3 	bl	80015d0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11a      	bne.n	8003672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d013      	beq.n	8003672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d1c8      	bne.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003698:	e06b      	b.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f876 	bl	8003790 <I2C_IsErrorOccurred>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e069      	b.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d138      	bne.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d105      	bne.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e055      	b.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d107      	bne.n	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2204      	movs	r2, #4
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
 80036f2:	e002      	b.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800370e:	400b      	ands	r3, r1
 8003710:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e029      	b.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fd ff4f 	bl	80015d0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d116      	bne.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00f      	beq.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d18c      	bne.n	800369a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	fe00e800 	.word	0xfe00e800

08003790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d068      	beq.n	800388e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2210      	movs	r2, #16
 80037c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c4:	e049      	b.n	800385a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d045      	beq.n	800385a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fd feff 	bl	80015d0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_IsErrorOccurred+0x54>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13a      	bne.n	800385a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003806:	d121      	bne.n	800384c <I2C_IsErrorOccurred+0xbc>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380e:	d01d      	beq.n	800384c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b20      	cmp	r3, #32
 8003814:	d01a      	beq.n	800384c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003824:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003826:	f7fd fed3 	bl	80015d0 <HAL_GetTick>
 800382a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382c:	e00e      	b.n	800384c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800382e:	f7fd fecf 	bl	80015d0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b19      	cmp	r3, #25
 800383a:	d907      	bls.n	800384c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f043 0320 	orr.w	r3, r3, #32
 8003842:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800384a:	e006      	b.n	800385a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b20      	cmp	r3, #32
 8003858:	d1e9      	bne.n	800382e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d003      	beq.n	8003870 <I2C_IsErrorOccurred+0xe0>
 8003868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0aa      	beq.n	80037c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003874:	2b00      	cmp	r3, #0
 8003876:	d103      	bne.n	8003880 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2220      	movs	r2, #32
 800387e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80038fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff fdc3 	bl	8003490 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <I2C_IsErrorOccurred+0x1bc>)
 8003916:	400b      	ands	r3, r1
 8003918:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800393e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003942:	4618      	mov	r0, r3
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	fe00e800 	.word	0xfe00e800

08003950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	4613      	mov	r3, r2
 8003960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003968:	7a7b      	ldrb	r3, [r7, #9]
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003970:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	4313      	orrs	r3, r2
 800397a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800397e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	0d5b      	lsrs	r3, r3, #21
 800398a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <I2C_TransferConfig+0x60>)
 8003990:	430b      	orrs	r3, r1
 8003992:	43db      	mvns	r3, r3
 8003994:	ea02 0103 	and.w	r1, r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	03ff63ff 	.word	0x03ff63ff

080039b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d138      	bne.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e032      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	; 0x24
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d139      	bne.n	8003ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e033      	b.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2224      	movs	r2, #36	; 0x24
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f001 b823 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 817d 	beq.w	8003e1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b20:	4bbc      	ldr	r3, [pc, #752]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d00c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b2c:	4bb9      	ldr	r3, [pc, #740]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d15c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x10e>
 8003b38:	4bb6      	ldr	r3, [pc, #728]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d155      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x10e>
 8003b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_OscConfig+0x94>
 8003b72:	4ba8      	ldr	r3, [pc, #672]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e015      	b.n	8003ba4 <HAL_RCC_OscConfig+0xc0>
 8003b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ba0:	4b9c      	ldr	r3, [pc, #624]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003bac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003bb0:	fa92 f2a2 	rbit	r2, r2
 8003bb4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003bb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f042 0220 	orr.w	r2, r2, #32
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f002 021f 	and.w	r2, r2, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 811f 	beq.w	8003e18 <HAL_RCC_OscConfig+0x334>
 8003bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8116 	bne.w	8003e18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f000 bfaf 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12e>
 8003c04:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a82      	ldr	r2, [pc, #520]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e036      	b.n	8003c80 <HAL_RCC_OscConfig+0x19c>
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x158>
 8003c22:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7b      	ldr	r2, [pc, #492]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b79      	ldr	r3, [pc, #484]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a78      	ldr	r2, [pc, #480]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e021      	b.n	8003c80 <HAL_RCC_OscConfig+0x19c>
 8003c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x184>
 8003c4e:	4b71      	ldr	r3, [pc, #452]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a70      	ldr	r2, [pc, #448]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6d      	ldr	r2, [pc, #436]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0x19c>
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a69      	ldr	r2, [pc, #420]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a66      	ldr	r2, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c80:	4b64      	ldr	r3, [pc, #400]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f023 020f 	bic.w	r2, r3, #15
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	495f      	ldr	r1, [pc, #380]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d059      	beq.n	8003d5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fd fc91 	bl	80015d0 <HAL_GetTick>
 8003cae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fd fc8c 	bl	80015d0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b64      	cmp	r3, #100	; 0x64
 8003cc2:	d902      	bls.n	8003cca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	f000 bf43 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
 8003cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003cde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0x218>
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e015      	b.n	8003d28 <HAL_RCC_OscConfig+0x244>
 8003cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003d18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003d30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003d34:	fa92 f2a2 	rbit	r2, r2
 8003d38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003d3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ab      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1d0>
 8003d5c:	e05d      	b.n	8003e1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fc37 	bl	80015d0 <HAL_GetTick>
 8003d62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fd fc32 	bl	80015d0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	; 0x64
 8003d76:	d902      	bls.n	8003d7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	f000 bee9 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
 8003d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d102      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2cc>
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	e015      	b.n	8003ddc <HAL_RCC_OscConfig+0x2f8>
 8003db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003db4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003dcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_RCC_OscConfig+0x330>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003de0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003de4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003de8:	fa92 f2a2 	rbit	r2, r2
 8003dec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003df0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003df4:	fab2 f282 	clz	r2, r2
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f042 0220 	orr.w	r2, r2, #32
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f002 021f 	and.w	r2, r2, #31
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ab      	bne.n	8003d68 <HAL_RCC_OscConfig+0x284>
 8003e10:	e003      	b.n	8003e1a <HAL_RCC_OscConfig+0x336>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 817d 	beq.w	800412a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e30:	4ba6      	ldr	r3, [pc, #664]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e3c:	4ba3      	ldr	r3, [pc, #652]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d172      	bne.n	8003f2e <HAL_RCC_OscConfig+0x44a>
 8003e48:	4ba0      	ldr	r3, [pc, #640]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d16c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x44a>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003e66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3a0>
 8003e7e:	4b93      	ldr	r3, [pc, #588]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e013      	b.n	8003eac <HAL_RCC_OscConfig+0x3c8>
 8003e84:	2302      	movs	r3, #2
 8003e86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e96:	2302      	movs	r3, #2
 8003e98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2202      	movs	r2, #2
 8003eae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003eb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003eb6:	fa92 f2a2 	rbit	r2, r2
 8003eba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003ebe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f042 0220 	orr.w	r2, r2, #32
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f002 021f 	and.w	r2, r2, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x410>
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d002      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f000 be2e 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b75      	ldr	r3, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	21f8      	movs	r1, #248	; 0xf8
 8003f0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003f12:	fa91 f1a1 	rbit	r1, r1
 8003f16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003f1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003f1e:	fab1 f181 	clz	r1, r1
 8003f22:	b2c9      	uxtb	r1, r1
 8003f24:	408b      	lsls	r3, r1
 8003f26:	4969      	ldr	r1, [pc, #420]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2c:	e0fd      	b.n	800412a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8088 	beq.w	8004050 <HAL_RCC_OscConfig+0x56c>
 8003f40:	2301      	movs	r3, #1
 8003f42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003f52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	461a      	mov	r2, r3
 8003f68:	2301      	movs	r3, #1
 8003f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fb30 	bl	80015d0 <HAL_GetTick>
 8003f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f76:	f7fd fb2b 	bl	80015d0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	f000 bde2 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d102      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4d8>
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0x500>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003fd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003fea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003fee:	fa92 f2a2 	rbit	r2, r2
 8003ff2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ff6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003ffa:	fab2 f282 	clz	r2, r2
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f002 021f 	and.w	r2, r2, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f202 	lsl.w	r2, r1, r2
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0af      	beq.n	8003f76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	21f8      	movs	r1, #248	; 0xf8
 800402c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004034:	fa91 f1a1 	rbit	r1, r1
 8004038:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800403c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004040:	fab1 f181 	clz	r1, r1
 8004044:	b2c9      	uxtb	r1, r1
 8004046:	408b      	lsls	r3, r1
 8004048:	4920      	ldr	r1, [pc, #128]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
 800404e:	e06c      	b.n	800412a <HAL_RCC_OscConfig+0x646>
 8004050:	2301      	movs	r3, #1
 8004052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004062:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd faa8 	bl	80015d0 <HAL_GetTick>
 8004080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004084:	e00a      	b.n	800409c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fd faa3 	bl	80015d0 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	f000 bd5a 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
 800409c:	2302      	movs	r3, #2
 800409e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80040ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d104      	bne.n	80040d0 <HAL_RCC_OscConfig+0x5ec>
 80040c6:	4b01      	ldr	r3, [pc, #4]	; (80040cc <HAL_RCC_OscConfig+0x5e8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	e015      	b.n	80040f8 <HAL_RCC_OscConfig+0x614>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	2302      	movs	r3, #2
 80040d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80040e2:	2302      	movs	r3, #2
 80040e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040ec:	fa93 f3a3 	rbit	r3, r3
 80040f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040f4:	4bc8      	ldr	r3, [pc, #800]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2202      	movs	r2, #2
 80040fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80040fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004102:	fa92 f2a2 	rbit	r2, r2
 8004106:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800410a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800410e:	fab2 f282 	clz	r2, r2
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	f042 0220 	orr.w	r2, r2, #32
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	f002 021f 	and.w	r2, r2, #31
 800411e:	2101      	movs	r1, #1
 8004120:	fa01 f202 	lsl.w	r2, r1, r2
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ad      	bne.n	8004086 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8110 	beq.w	8004360 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d079      	beq.n	8004244 <HAL_RCC_OscConfig+0x760>
 8004150:	2301      	movs	r3, #1
 8004152:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	4bab      	ldr	r3, [pc, #684]	; (800441c <HAL_RCC_OscConfig+0x938>)
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	461a      	mov	r2, r3
 8004176:	2301      	movs	r3, #1
 8004178:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fd fa29 	bl	80015d0 <HAL_GetTick>
 800417e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fa24 	bl	80015d0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d902      	bls.n	800419a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	f000 bcdb 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
 800419a:	2302      	movs	r3, #2
 800419c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80041b4:	2202      	movs	r2, #2
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	fa93 f2a3 	rbit	r2, r3
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d8:	2202      	movs	r2, #2
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	fa93 f2a3 	rbit	r2, r3
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80041f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f4:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 80041f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004200:	2102      	movs	r1, #2
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	fa93 f1a3 	rbit	r1, r3
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800421a:	6019      	str	r1, [r3, #0]
  return result;
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0a0      	beq.n	8004184 <HAL_RCC_OscConfig+0x6a0>
 8004242:	e08d      	b.n	8004360 <HAL_RCC_OscConfig+0x87c>
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004266:	601a      	str	r2, [r3, #0]
  return result;
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004270:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	4b68      	ldr	r3, [pc, #416]	; (800441c <HAL_RCC_OscConfig+0x938>)
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fd f9a3 	bl	80015d0 <HAL_GetTick>
 800428a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd f99e 	bl	80015d0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d902      	bls.n	80042a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	f000 bc55 	b.w	8004b50 <HAL_RCC_OscConfig+0x106c>
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042ae:	2202      	movs	r2, #2
 80042b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	fa93 f2a3 	rbit	r2, r3
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042d2:	2202      	movs	r2, #2
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fa93 f2a3 	rbit	r2, r3
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 8004314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800431e:	2102      	movs	r1, #2
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	fa93 f1a3 	rbit	r1, r3
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004338:	6019      	str	r1, [r3, #0]
  return result;
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d197      	bne.n	8004290 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 81a1 	beq.w	80046b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800437c:	4b26      	ldr	r3, [pc, #152]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	61d3      	str	r3, [r2, #28]
 8004394:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800439c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80043ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_RCC_OscConfig+0x93c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11a      	bne.n	80043f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <HAL_RCC_OscConfig+0x93c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_RCC_OscConfig+0x93c>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fd f8ff 	bl	80015d0 <HAL_GetTick>
 80043d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d6:	e009      	b.n	80043ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d8:	f7fd f8fa 	bl	80015d0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b64      	cmp	r3, #100	; 0x64
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e3b1      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_RCC_OscConfig+0x93c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ef      	beq.n	80043d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <HAL_RCC_OscConfig+0x940>
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	4a02      	ldr	r2, [pc, #8]	; (8004418 <HAL_RCC_OscConfig+0x934>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6213      	str	r3, [r2, #32]
 8004414:	e03c      	b.n	8004490 <HAL_RCC_OscConfig+0x9ac>
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	10908120 	.word	0x10908120
 8004420:	40007000 	.word	0x40007000
 8004424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x96a>
 8004434:	4bc1      	ldr	r3, [pc, #772]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4ac0      	ldr	r2, [pc, #768]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	6213      	str	r3, [r2, #32]
 8004440:	4bbe      	ldr	r3, [pc, #760]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4abd      	ldr	r2, [pc, #756]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	6213      	str	r3, [r2, #32]
 800444c:	e020      	b.n	8004490 <HAL_RCC_OscConfig+0x9ac>
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x994>
 800445e:	4bb7      	ldr	r3, [pc, #732]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4ab6      	ldr	r2, [pc, #728]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6213      	str	r3, [r2, #32]
 800446a:	4bb4      	ldr	r3, [pc, #720]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4ab3      	ldr	r2, [pc, #716]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6213      	str	r3, [r2, #32]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x9ac>
 8004478:	4bb0      	ldr	r3, [pc, #704]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4aaf      	ldr	r2, [pc, #700]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6213      	str	r3, [r2, #32]
 8004484:	4bad      	ldr	r3, [pc, #692]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4aac      	ldr	r2, [pc, #688]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8081 	beq.w	80045a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fd f895 	bl	80015d0 <HAL_GetTick>
 80044a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd f890 	bl	80015d0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e345      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
 80044c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044cc:	2202      	movs	r2, #2
 80044ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	fa93 f2a3 	rbit	r2, r3
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80044f0:	2202      	movs	r2, #2
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	fa93 f2a3 	rbit	r2, r3
 8004502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004506:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800450a:	601a      	str	r2, [r3, #0]
  return result;
 800450c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004510:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004514:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d102      	bne.n	8004530 <HAL_RCC_OscConfig+0xa4c>
 800452a:	4b84      	ldr	r3, [pc, #528]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	e013      	b.n	8004558 <HAL_RCC_OscConfig+0xa74>
 8004530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004534:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004538:	2202      	movs	r2, #2
 800453a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	fa93 f2a3 	rbit	r2, r3
 800454a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	4b79      	ldr	r3, [pc, #484]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800455c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004560:	2102      	movs	r1, #2
 8004562:	6011      	str	r1, [r2, #0]
 8004564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004568:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	fa92 f1a2 	rbit	r1, r2
 8004572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004576:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800457a:	6011      	str	r1, [r2, #0]
  return result;
 800457c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004580:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	fab2 f282 	clz	r2, r2
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	f002 021f 	and.w	r2, r2, #31
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f202 	lsl.w	r2, r1, r2
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d084      	beq.n	80044ac <HAL_RCC_OscConfig+0x9c8>
 80045a2:	e07f      	b.n	80046a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a4:	f7fd f814 	bl	80015d0 <HAL_GetTick>
 80045a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	e00b      	b.n	80045c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd f80f 	bl	80015d0 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e2c4      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
 80045c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80045ce:	2202      	movs	r2, #2
 80045d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	fa93 f2a3 	rbit	r2, r3
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80045f2:	2202      	movs	r2, #2
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	fa93 f2a3 	rbit	r2, r3
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800460c:	601a      	str	r2, [r3, #0]
  return result;
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004616:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f043 0302 	orr.w	r3, r3, #2
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d102      	bne.n	8004632 <HAL_RCC_OscConfig+0xb4e>
 800462c:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	e013      	b.n	800465a <HAL_RCC_OscConfig+0xb76>
 8004632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004636:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800463a:	2202      	movs	r2, #2
 800463c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004642:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	fa93 f2a3 	rbit	r2, r3
 800464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004650:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4b39      	ldr	r3, [pc, #228]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800465e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004662:	2102      	movs	r1, #2
 8004664:	6011      	str	r1, [r2, #0]
 8004666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800466a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	fa92 f1a2 	rbit	r1, r2
 8004674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004678:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800467c:	6011      	str	r1, [r2, #0]
  return result;
 800467e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004682:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	fab2 f282 	clz	r2, r2
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	f002 021f 	and.w	r2, r2, #31
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f202 	lsl.w	r2, r1, r2
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d184      	bne.n	80045ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ac:	4b23      	ldr	r3, [pc, #140]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8242 	beq.w	8004b4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCC_OscConfig+0xc58>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	f000 8213 	beq.w	8004afe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f040 8162 	bne.w	80049ae <HAL_RCC_OscConfig+0xeca>
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80046f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	fa93 f2a3 	rbit	r2, r3
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800470e:	601a      	str	r2, [r3, #0]
  return result;
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004718:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004724:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fc ff4e 	bl	80015d0 <HAL_GetTick>
 8004734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004738:	e00c      	b.n	8004754 <HAL_RCC_OscConfig+0xc70>
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fc ff46 	bl	80015d0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1fd      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
 8004754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004758:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800475c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004766:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	fa93 f2a3 	rbit	r2, r3
 8004770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004774:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004778:	601a      	str	r2, [r3, #0]
  return result;
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004782:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_RCC_OscConfig+0xcba>
 8004798:	4bb0      	ldr	r3, [pc, #704]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	e027      	b.n	80047ee <HAL_RCC_OscConfig+0xd0a>
 800479e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	fa93 f2a3 	rbit	r2, r3
 80047ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80047cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	fa93 f2a3 	rbit	r2, r3
 80047e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	4b9c      	ldr	r3, [pc, #624]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80047f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047fa:	6011      	str	r1, [r2, #0]
 80047fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004800:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	fa92 f1a2 	rbit	r1, r2
 800480a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800480e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004812:	6011      	str	r1, [r2, #0]
  return result;
 8004814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004818:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	fab2 f282 	clz	r2, r2
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	f042 0220 	orr.w	r2, r2, #32
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	f002 021f 	and.w	r2, r2, #31
 800482e:	2101      	movs	r1, #1
 8004830:	fa01 f202 	lsl.w	r2, r1, r2
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d182      	bne.n	8004740 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800484e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	430b      	orrs	r3, r1
 800485c:	497f      	ldr	r1, [pc, #508]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]
 8004862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004866:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800486a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800486e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004874:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	fa93 f2a3 	rbit	r2, r3
 800487e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004882:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004886:	601a      	str	r2, [r3, #0]
  return result;
 8004888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004890:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800489c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	461a      	mov	r2, r3
 80048a4:	2301      	movs	r3, #1
 80048a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fc fe92 	bl	80015d0 <HAL_GetTick>
 80048ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b0:	e009      	b.n	80048c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fc fe8d 	bl	80015d0 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e144      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
 80048c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80048ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	fa93 f2a3 	rbit	r2, r3
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80048ea:	601a      	str	r2, [r3, #0]
  return result;
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80048f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f6:	fab3 f383 	clz	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	d102      	bne.n	8004910 <HAL_RCC_OscConfig+0xe2c>
 800490a:	4b54      	ldr	r3, [pc, #336]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	e027      	b.n	8004960 <HAL_RCC_OscConfig+0xe7c>
 8004910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004914:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800491c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	fa93 f2a3 	rbit	r2, r3
 800492c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004930:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800493e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004964:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004972:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	fa92 f1a2 	rbit	r1, r2
 800497c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004980:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004984:	6011      	str	r1, [r2, #0]
  return result;
 8004986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800498a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	fab2 f282 	clz	r2, r2
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	f042 0220 	orr.w	r2, r2, #32
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f002 021f 	and.w	r2, r2, #31
 80049a0:	2101      	movs	r1, #1
 80049a2:	fa01 f202 	lsl.w	r2, r1, r2
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d082      	beq.n	80048b2 <HAL_RCC_OscConfig+0xdce>
 80049ac:	e0cf      	b.n	8004b4e <HAL_RCC_OscConfig+0x106a>
 80049ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80049b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	fa93 f2a3 	rbit	r2, r3
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80049d2:	601a      	str	r2, [r3, #0]
  return result;
 80049d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80049dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fc fdec 	bl	80015d0 <HAL_GetTick>
 80049f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fc:	e009      	b.n	8004a12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fc fde7 	bl	80015d0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e09e      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	fa93 f2a3 	rbit	r2, r3
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a36:	601a      	str	r2, [r3, #0]
  return result;
 8004a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d104      	bne.n	8004a60 <HAL_RCC_OscConfig+0xf7c>
 8004a56:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <HAL_RCC_OscConfig+0xf78>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e029      	b.n	8004ab0 <HAL_RCC_OscConfig+0xfcc>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	fa93 f2a3 	rbit	r2, r3
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_RCC_OscConfig+0x1078>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ab4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004ab8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004abc:	6011      	str	r1, [r2, #0]
 8004abe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ac2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	fa92 f1a2 	rbit	r1, r2
 8004acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ad0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ad4:	6011      	str	r1, [r2, #0]
  return result;
 8004ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ada:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	fab2 f282 	clz	r2, r2
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	f042 0220 	orr.w	r2, r2, #32
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	f002 021f 	and.w	r2, r2, #31
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f202 	lsl.w	r2, r1, r2
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d180      	bne.n	80049fe <HAL_RCC_OscConfig+0xf1a>
 8004afc:	e027      	b.n	8004b4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e01e      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_RCC_OscConfig+0x1078>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10b      	bne.n	8004b4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004b32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b09e      	sub	sp, #120	; 0x78
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e162      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b78:	4b90      	ldr	r3, [pc, #576]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d910      	bls.n	8004ba8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b8d      	ldr	r3, [pc, #564]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 0207 	bic.w	r2, r3, #7
 8004b8e:	498b      	ldr	r1, [pc, #556]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b89      	ldr	r3, [pc, #548]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e14a      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b82      	ldr	r3, [pc, #520]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	497f      	ldr	r1, [pc, #508]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80dc 	beq.w	8004d8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d13c      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xf6>
 8004bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be4:	fa93 f3a3 	rbit	r3, r3
 8004be8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xa6>
 8004c00:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	e00f      	b.n	8004c26 <HAL_RCC_ClockConfig+0xc6>
 8004c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	667b      	str	r3, [r7, #100]	; 0x64
 8004c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c18:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c1c:	fa93 f3a3 	rbit	r3, r3
 8004c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c22:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c2e:	fa92 f2a2 	rbit	r2, r2
 8004c32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c36:	fab2 f282 	clz	r2, r2
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	f042 0220 	orr.w	r2, r2, #32
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	f002 021f 	and.w	r2, r2, #31
 8004c46:	2101      	movs	r1, #1
 8004c48:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d17b      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0f3      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d13c      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x178>
 8004c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d102      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x128>
 8004c82:	4b4f      	ldr	r3, [pc, #316]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	e00f      	b.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
 8004c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	647b      	str	r3, [r7, #68]	; 0x44
 8004c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca4:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cac:	63ba      	str	r2, [r7, #56]	; 0x38
 8004cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb0:	fa92 f2a2 	rbit	r2, r2
 8004cb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb8:	fab2 f282 	clz	r2, r2
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	f042 0220 	orr.w	r2, r2, #32
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	f002 021f 	and.w	r2, r2, #31
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f202 	lsl.w	r2, r1, r2
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d13a      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0b2      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d102      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1a0>
 8004cfa:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	e00d      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1bc>
 8004d00:	2302      	movs	r3, #2
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	4b29      	ldr	r3, [pc, #164]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	61ba      	str	r2, [r7, #24]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	fa92 f2a2 	rbit	r2, r2
 8004d26:	617a      	str	r2, [r7, #20]
  return result;
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	fab2 f282 	clz	r2, r2
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	f042 0220 	orr.w	r2, r2, #32
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	f002 021f 	and.w	r2, r2, #31
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e079      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	491a      	ldr	r1, [pc, #104]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fc fc38 	bl	80015d0 <HAL_GetTick>
 8004d60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fc fc34 	bl	80015d0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e061      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_RCC_ClockConfig+0x260>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d214      	bcs.n	8004dc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 0207 	bic.w	r2, r3, #7
 8004da2:	4906      	ldr	r1, [pc, #24]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <HAL_RCC_ClockConfig+0x25c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e040      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2de>
 8004dbc:	40022000 	.word	0x40022000
 8004dc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd0:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <HAL_RCC_ClockConfig+0x2e8>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	491a      	ldr	r1, [pc, #104]	; (8004e48 <HAL_RCC_ClockConfig+0x2e8>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_RCC_ClockConfig+0x2e8>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4912      	ldr	r1, [pc, #72]	; (8004e48 <HAL_RCC_ClockConfig+0x2e8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e02:	f000 f829 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e06:	4601      	mov	r1, r0
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <HAL_RCC_ClockConfig+0x2e8>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e10:	22f0      	movs	r2, #240	; 0xf0
 8004e12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	fa92 f2a2 	rbit	r2, r2
 8004e1a:	60fa      	str	r2, [r7, #12]
  return result;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	fab2 f282 	clz	r2, r2
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	40d3      	lsrs	r3, r2
 8004e26:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <HAL_RCC_ClockConfig+0x2ec>)
 8004e28:	5cd3      	ldrb	r3, [r2, r3]
 8004e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <HAL_RCC_ClockConfig+0x2f0>)
 8004e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <HAL_RCC_ClockConfig+0x2f4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fc fb86 	bl	8001548 <HAL_InitTick>
  
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3778      	adds	r7, #120	; 0x78
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	080069ec 	.word	0x080069ec
 8004e50:	20000000 	.word	0x20000000
 8004e54:	20000004 	.word	0x20000004

08004e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b08b      	sub	sp, #44	; 0x2c
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e72:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d002      	beq.n	8004e88 <HAL_RCC_GetSysClockFreq+0x30>
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d003      	beq.n	8004e8e <HAL_RCC_GetSysClockFreq+0x36>
 8004e86:	e03c      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e88:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e8a:	623b      	str	r3, [r7, #32]
      break;
 8004e8c:	e03c      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	fa92 f2a2 	rbit	r2, r2
 8004ea0:	607a      	str	r2, [r7, #4]
  return result;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	fab2 f282 	clz	r2, r2
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	40d3      	lsrs	r3, r2
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004eb2:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	220f      	movs	r2, #15
 8004ebc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	fa92 f2a2 	rbit	r2, r2
 8004ec4:	60fa      	str	r2, [r7, #12]
  return result;
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	fab2 f282 	clz	r2, r2
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	40d3      	lsrs	r3, r2
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ed2:	5cd3      	ldrb	r3, [r2, r3]
 8004ed4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ee0:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef0:	e004      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	623b      	str	r3, [r7, #32]
      break;
 8004f00:	e002      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f04:	623b      	str	r3, [r7, #32]
      break;
 8004f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f08:	6a3b      	ldr	r3, [r7, #32]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	372c      	adds	r7, #44	; 0x2c
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	007a1200 	.word	0x007a1200
 8004f20:	08006a04 	.word	0x08006a04
 8004f24:	08006a14 	.word	0x08006a14
 8004f28:	003d0900 	.word	0x003d0900

08004f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000000 	.word	0x20000000

08004f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f4a:	f7ff ffef 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f4e:	4601      	mov	r1, r0
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	fa92 f2a2 	rbit	r2, r2
 8004f64:	603a      	str	r2, [r7, #0]
  return result;
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	fab2 f282 	clz	r2, r2
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	40d3      	lsrs	r3, r2
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f72:	5cd3      	ldrb	r3, [r2, r3]
 8004f74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000
 8004f84:	080069fc 	.word	0x080069fc

08004f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f8e:	f7ff ffcd 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f92:	4601      	mov	r1, r0
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004fa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	fa92 f2a2 	rbit	r2, r2
 8004fa8:	603a      	str	r2, [r7, #0]
  return result;
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	40d3      	lsrs	r3, r2
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	080069fc 	.word	0x080069fc

08004fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b092      	sub	sp, #72	; 0x48
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80cd 	beq.w	800518a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff0:	4b8e      	ldr	r3, [pc, #568]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10e      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffc:	4b8b      	ldr	r3, [pc, #556]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	4a8a      	ldr	r2, [pc, #552]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	61d3      	str	r3, [r2, #28]
 8005008:	4b88      	ldr	r3, [pc, #544]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501a:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d118      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005026:	4b82      	ldr	r3, [pc, #520]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a81      	ldr	r2, [pc, #516]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800502c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005032:	f7fc facd 	bl	80015d0 <HAL_GetTick>
 8005036:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005038:	e008      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503a:	f7fc fac9 	bl	80015d0 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b64      	cmp	r3, #100	; 0x64
 8005046:	d901      	bls.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e0ea      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f0      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005058:	4b74      	ldr	r3, [pc, #464]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d07d      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005072:	429a      	cmp	r2, r3
 8005074:	d076      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005076:	4b6d      	ldr	r3, [pc, #436]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	fa93 f3a3 	rbit	r3, r3
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	4b66      	ldr	r3, [pc, #408]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	461a      	mov	r2, r3
 80050a0:	2301      	movs	r3, #1
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050b4:	fab3 f383 	clz	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b5d      	ldr	r3, [pc, #372]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	461a      	mov	r2, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050c8:	4a58      	ldr	r2, [pc, #352]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d045      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fc fa7a 	bl	80015d0 <HAL_GetTick>
 80050dc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fc fa76 	bl	80015d0 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e095      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80050f6:	2302      	movs	r3, #2
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
 8005102:	2302      	movs	r3, #2
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	61fb      	str	r3, [r7, #28]
  return result;
 800510e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005110:	fab3 f383 	clz	r3, r3
 8005114:	b2db      	uxtb	r3, r3
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f043 0302 	orr.w	r3, r3, #2
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d102      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	e007      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800512a:	2302      	movs	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	4b3d      	ldr	r3, [pc, #244]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2202      	movs	r2, #2
 800513c:	613a      	str	r2, [r7, #16]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	fa92 f2a2 	rbit	r2, r2
 8005144:	60fa      	str	r2, [r7, #12]
  return result;
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	fab2 f282 	clz	r2, r2
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	f002 021f 	and.w	r2, r2, #31
 8005158:	2101      	movs	r1, #1
 800515a:	fa01 f202 	lsl.w	r2, r1, r2
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0bd      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005164:	4b31      	ldr	r3, [pc, #196]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	492e      	ldr	r1, [pc, #184]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	4313      	orrs	r3, r2
 8005174:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005176:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800517a:	2b01      	cmp	r3, #1
 800517c:	d105      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517e:	4b2b      	ldr	r3, [pc, #172]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4a2a      	ldr	r2, [pc, #168]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005188:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005196:	4b25      	ldr	r3, [pc, #148]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f023 0203 	bic.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4922      	ldr	r1, [pc, #136]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	491a      	ldr	r1, [pc, #104]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051d2:	4b16      	ldr	r3, [pc, #88]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	4913      	ldr	r1, [pc, #76]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80051f0:	4b0e      	ldr	r3, [pc, #56]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	490b      	ldr	r1, [pc, #44]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	4904      	ldr	r1, [pc, #16]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521c:	4313      	orrs	r3, r2
 800521e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3748      	adds	r7, #72	; 0x48
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
 8005230:	40007000 	.word	0x40007000
 8005234:	10908100 	.word	0x10908100

08005238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e049      	b.n	80052de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc f856 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 f954 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <HAL_TIM_Base_Start+0x98>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00e      	beq.n	8005330 <HAL_TIM_Base_Start+0x48>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d009      	beq.n	8005330 <HAL_TIM_Base_Start+0x48>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <HAL_TIM_Base_Start+0x9c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_TIM_Base_Start+0x48>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a17      	ldr	r2, [pc, #92]	; (8005388 <HAL_TIM_Base_Start+0xa0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d115      	bne.n	800535c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	4b15      	ldr	r3, [pc, #84]	; (800538c <HAL_TIM_Base_Start+0xa4>)
 8005338:	4013      	ands	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b06      	cmp	r3, #6
 8005340:	d015      	beq.n	800536e <HAL_TIM_Base_Start+0x86>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d011      	beq.n	800536e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	e008      	b.n	800536e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e000      	b.n	8005370 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40000400 	.word	0x40000400
 8005388:	40014000 	.word	0x40014000
 800538c:	00010007 	.word	0x00010007

08005390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_ConfigClockSource+0x1c>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0b6      	b.n	800551a <HAL_TIM_ConfigClockSource+0x18a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e8:	d03e      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0xd8>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	f200 8087 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x170>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f6:	f000 8086 	beq.w	8005506 <HAL_TIM_ConfigClockSource+0x176>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d87f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d01a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xaa>
 8005404:	2b70      	cmp	r3, #112	; 0x70
 8005406:	d87b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d050      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x11e>
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d877      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d03c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0xfe>
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d873      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d058      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x13e>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d86f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d064      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15e>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d86b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d060      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15e>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d867      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15e>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d05a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15e>
 8005438:	e062      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f000 f95d 	bl	8005708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800545c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e04f      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f000 f946 	bl	8005708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800548a:	609a      	str	r2, [r3, #8]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 f8ba 	bl	8005614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2150      	movs	r1, #80	; 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f913 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e02c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 f8d9 	bl	8005672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2160      	movs	r1, #96	; 0x60
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f903 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e01c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 f89a 	bl	8005614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f8f3 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 f8ea 	bl	80056d2 <TIM_ITRx_SetConfig>
      break;
 80054fe:	e003      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a32      	ldr	r2, [pc, #200]	; (8005600 <TIM_Base_SetConfig+0xdc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x28>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x28>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a2f      	ldr	r2, [pc, #188]	; (8005604 <TIM_Base_SetConfig+0xe0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a27      	ldr	r2, [pc, #156]	; (8005600 <TIM_Base_SetConfig+0xdc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d00f      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a24      	ldr	r2, [pc, #144]	; (8005604 <TIM_Base_SetConfig+0xe0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00b      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a23      	ldr	r2, [pc, #140]	; (8005608 <TIM_Base_SetConfig+0xe4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d007      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a22      	ldr	r2, [pc, #136]	; (800560c <TIM_Base_SetConfig+0xe8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d003      	beq.n	800558e <TIM_Base_SetConfig+0x6a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a21      	ldr	r2, [pc, #132]	; (8005610 <TIM_Base_SetConfig+0xec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d108      	bne.n	80055a0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <TIM_Base_SetConfig+0xdc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0xc0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <TIM_Base_SetConfig+0xe4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0xc0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a0d      	ldr	r2, [pc, #52]	; (800560c <TIM_Base_SetConfig+0xe8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0xc0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0c      	ldr	r2, [pc, #48]	; (8005610 <TIM_Base_SetConfig+0xec>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d103      	bne.n	80055ec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	615a      	str	r2, [r3, #20]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800

08005614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0201 	bic.w	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 030a 	bic.w	r3, r3, #10
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0210 	bic.w	r2, r3, #16
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	621a      	str	r2, [r3, #32]
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f043 0307 	orr.w	r3, r3, #7
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	431a      	orrs	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e054      	b.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a24      	ldr	r2, [pc, #144]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d009      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a11      	ldr	r2, [pc, #68]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10c      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000400 	.word	0x40000400
 8005820:	40014000 	.word	0x40014000

08005824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e040      	b.n	80058b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fb fd80 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2224      	movs	r2, #36	; 0x24
 8005850:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8b6 	bl	80059d4 <UART_SetConfig>
 8005868:	4603      	mov	r3, r0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e022      	b.n	80058b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9e0 	bl	8005c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800588e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800589e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa67 	bl	8005d84 <UART_CheckIdleState>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08a      	sub	sp, #40	; 0x28
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d178      	bne.n	80059ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_UART_Transmit+0x24>
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e071      	b.n	80059cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2221      	movs	r2, #33	; 0x21
 80058f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f6:	f7fb fe6b 	bl	80015d0 <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d108      	bne.n	8005928 <HAL_UART_Transmit+0x68>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e003      	b.n	8005930 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005930:	e030      	b.n	8005994 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fac9 	bl	8005ed4 <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e03c      	b.n	80059cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005964:	b292      	uxth	r2, r2
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	3302      	adds	r3, #2
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e008      	b.n	8005982 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	b292      	uxth	r2, r2
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1c8      	bne.n	8005932 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	2140      	movs	r1, #64	; 0x40
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa92 	bl	8005ed4 <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e005      	b.n	80059cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b8a      	ldr	r3, [pc, #552]	; (8005c28 <UART_SetConfig+0x254>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a78      	ldr	r2, [pc, #480]	; (8005c2c <UART_SetConfig+0x258>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d120      	bne.n	8005a92 <UART_SetConfig+0xbe>
 8005a50:	4b77      	ldr	r3, [pc, #476]	; (8005c30 <UART_SetConfig+0x25c>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d817      	bhi.n	8005a8c <UART_SetConfig+0xb8>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <UART_SetConfig+0x90>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005a87 	.word	0x08005a87
 8005a70:	08005a7b 	.word	0x08005a7b
 8005a74:	2300      	movs	r3, #0
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e01d      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e01a      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005a80:	2304      	movs	r3, #4
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e017      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005a86:	2308      	movs	r3, #8
 8005a88:	77fb      	strb	r3, [r7, #31]
 8005a8a:	e014      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e011      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a67      	ldr	r2, [pc, #412]	; (8005c34 <UART_SetConfig+0x260>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d102      	bne.n	8005aa2 <UART_SetConfig+0xce>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e009      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a64      	ldr	r2, [pc, #400]	; (8005c38 <UART_SetConfig+0x264>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d102      	bne.n	8005ab2 <UART_SetConfig+0xde>
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e001      	b.n	8005ab6 <UART_SetConfig+0xe2>
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abe:	d15a      	bne.n	8005b76 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005ac0:	7ffb      	ldrb	r3, [r7, #31]
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d827      	bhi.n	8005b16 <UART_SetConfig+0x142>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0xf8>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af9 	.word	0x08005af9
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b07 	.word	0x08005b07
 8005ae0:	08005b17 	.word	0x08005b17
 8005ae4:	08005b17 	.word	0x08005b17
 8005ae8:	08005b17 	.word	0x08005b17
 8005aec:	08005b0f 	.word	0x08005b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af0:	f7ff fa28 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8005af4:	61b8      	str	r0, [r7, #24]
        break;
 8005af6:	e013      	b.n	8005b20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7ff fa46 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8005afc:	61b8      	str	r0, [r7, #24]
        break;
 8005afe:	e00f      	b.n	8005b20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b00:	4b4e      	ldr	r3, [pc, #312]	; (8005c3c <UART_SetConfig+0x268>)
 8005b02:	61bb      	str	r3, [r7, #24]
        break;
 8005b04:	e00c      	b.n	8005b20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b06:	f7ff f9a7 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8005b0a:	61b8      	str	r0, [r7, #24]
        break;
 8005b0c:	e008      	b.n	8005b20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b12:	61bb      	str	r3, [r7, #24]
        break;
 8005b14:	e004      	b.n	8005b20 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d074      	beq.n	8005c10 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	005a      	lsls	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	441a      	add	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	d916      	bls.n	8005b70 <UART_SetConfig+0x19c>
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d212      	bcs.n	8005b70 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f023 030f 	bic.w	r3, r3, #15
 8005b52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	89fb      	ldrh	r3, [r7, #14]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	89fa      	ldrh	r2, [r7, #14]
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	e04f      	b.n	8005c10 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	77bb      	strb	r3, [r7, #30]
 8005b74:	e04c      	b.n	8005c10 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d828      	bhi.n	8005bce <UART_SetConfig+0x1fa>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x1b0>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bbf 	.word	0x08005bbf
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bcf 	.word	0x08005bcf
 8005ba0:	08005bcf 	.word	0x08005bcf
 8005ba4:	08005bc7 	.word	0x08005bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7ff f9cc 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8005bac:	61b8      	str	r0, [r7, #24]
        break;
 8005bae:	e013      	b.n	8005bd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb0:	f7ff f9ea 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8005bb4:	61b8      	str	r0, [r7, #24]
        break;
 8005bb6:	e00f      	b.n	8005bd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb8:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <UART_SetConfig+0x268>)
 8005bba:	61bb      	str	r3, [r7, #24]
        break;
 8005bbc:	e00c      	b.n	8005bd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bbe:	f7ff f94b 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8005bc2:	61b8      	str	r0, [r7, #24]
        break;
 8005bc4:	e008      	b.n	8005bd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bca:	61bb      	str	r3, [r7, #24]
        break;
 8005bcc:	e004      	b.n	8005bd8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8005bd6:	bf00      	nop
    }

    if (pclk != 0U)
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d018      	beq.n	8005c10 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	085a      	lsrs	r2, r3, #1
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	441a      	add	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b0f      	cmp	r3, #15
 8005bf6:	d909      	bls.n	8005c0c <UART_SetConfig+0x238>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfe:	d205      	bcs.n	8005c0c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	e001      	b.n	8005c10 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	efff69f3 	.word	0xefff69f3
 8005c2c:	40013800 	.word	0x40013800
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40004400 	.word	0x40004400
 8005c38:	40004800 	.word	0x40004800
 8005c3c:	007a1200 	.word	0x007a1200

08005c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01a      	beq.n	8005d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3e:	d10a      	bne.n	8005d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b098      	sub	sp, #96	; 0x60
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d94:	f7fb fc1c 	bl	80015d0 <HAL_GetTick>
 8005d98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d12e      	bne.n	8005e06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f88c 	bl	8005ed4 <UART_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d021      	beq.n	8005e06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
 8005de2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e062      	b.n	8005ecc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d149      	bne.n	8005ea8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f856 	bl	8005ed4 <UART_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d03c      	beq.n	8005ea8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e80:	61fa      	str	r2, [r7, #28]
 8005e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e011      	b.n	8005ecc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3758      	adds	r7, #88	; 0x58
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee4:	e049      	b.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d045      	beq.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eee:	f7fb fb6f 	bl	80015d0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e048      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d031      	beq.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d110      	bne.n	8005f46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f838 	bl	8005fa2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2208      	movs	r2, #8
 8005f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e029      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f54:	d111      	bne.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f81e 	bl	8005fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e00f      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4013      	ands	r3, r2
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	bf0c      	ite	eq
 8005f8a:	2301      	moveq	r3, #1
 8005f8c:	2300      	movne	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d0a6      	beq.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b095      	sub	sp, #84	; 0x54
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e6      	bne.n	8005faa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e5      	bne.n	8005fdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006014:	2b01      	cmp	r3, #1
 8006016:	d118      	bne.n	800604a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	60bb      	str	r3, [r7, #8]
   return(result);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 0310 	bic.w	r3, r3, #16
 800602c:	647b      	str	r3, [r7, #68]	; 0x44
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	613b      	str	r3, [r7, #16]
   return(result);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e6      	bne.n	8006018 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800605e:	bf00      	nop
 8006060:	3754      	adds	r7, #84	; 0x54
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <__errno>:
 800606c:	4b01      	ldr	r3, [pc, #4]	; (8006074 <__errno+0x8>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	2000000c 	.word	0x2000000c

08006078 <__libc_init_array>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4d0d      	ldr	r5, [pc, #52]	; (80060b0 <__libc_init_array+0x38>)
 800607c:	4c0d      	ldr	r4, [pc, #52]	; (80060b4 <__libc_init_array+0x3c>)
 800607e:	1b64      	subs	r4, r4, r5
 8006080:	10a4      	asrs	r4, r4, #2
 8006082:	2600      	movs	r6, #0
 8006084:	42a6      	cmp	r6, r4
 8006086:	d109      	bne.n	800609c <__libc_init_array+0x24>
 8006088:	4d0b      	ldr	r5, [pc, #44]	; (80060b8 <__libc_init_array+0x40>)
 800608a:	4c0c      	ldr	r4, [pc, #48]	; (80060bc <__libc_init_array+0x44>)
 800608c:	f000 fc8e 	bl	80069ac <_init>
 8006090:	1b64      	subs	r4, r4, r5
 8006092:	10a4      	asrs	r4, r4, #2
 8006094:	2600      	movs	r6, #0
 8006096:	42a6      	cmp	r6, r4
 8006098:	d105      	bne.n	80060a6 <__libc_init_array+0x2e>
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a0:	4798      	blx	r3
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7ee      	b.n	8006084 <__libc_init_array+0xc>
 80060a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060aa:	4798      	blx	r3
 80060ac:	3601      	adds	r6, #1
 80060ae:	e7f2      	b.n	8006096 <__libc_init_array+0x1e>
 80060b0:	08006a58 	.word	0x08006a58
 80060b4:	08006a58 	.word	0x08006a58
 80060b8:	08006a58 	.word	0x08006a58
 80060bc:	08006a5c 	.word	0x08006a5c

080060c0 <memset>:
 80060c0:	4402      	add	r2, r0
 80060c2:	4603      	mov	r3, r0
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d100      	bne.n	80060ca <memset+0xa>
 80060c8:	4770      	bx	lr
 80060ca:	f803 1b01 	strb.w	r1, [r3], #1
 80060ce:	e7f9      	b.n	80060c4 <memset+0x4>

080060d0 <siprintf>:
 80060d0:	b40e      	push	{r1, r2, r3}
 80060d2:	b500      	push	{lr}
 80060d4:	b09c      	sub	sp, #112	; 0x70
 80060d6:	ab1d      	add	r3, sp, #116	; 0x74
 80060d8:	9002      	str	r0, [sp, #8]
 80060da:	9006      	str	r0, [sp, #24]
 80060dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060e0:	4809      	ldr	r0, [pc, #36]	; (8006108 <siprintf+0x38>)
 80060e2:	9107      	str	r1, [sp, #28]
 80060e4:	9104      	str	r1, [sp, #16]
 80060e6:	4909      	ldr	r1, [pc, #36]	; (800610c <siprintf+0x3c>)
 80060e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ec:	9105      	str	r1, [sp, #20]
 80060ee:	6800      	ldr	r0, [r0, #0]
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	a902      	add	r1, sp, #8
 80060f4:	f000 f868 	bl	80061c8 <_svfiprintf_r>
 80060f8:	9b02      	ldr	r3, [sp, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	b01c      	add	sp, #112	; 0x70
 8006100:	f85d eb04 	ldr.w	lr, [sp], #4
 8006104:	b003      	add	sp, #12
 8006106:	4770      	bx	lr
 8006108:	2000000c 	.word	0x2000000c
 800610c:	ffff0208 	.word	0xffff0208

08006110 <__ssputs_r>:
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	688e      	ldr	r6, [r1, #8]
 8006116:	429e      	cmp	r6, r3
 8006118:	4682      	mov	sl, r0
 800611a:	460c      	mov	r4, r1
 800611c:	4690      	mov	r8, r2
 800611e:	461f      	mov	r7, r3
 8006120:	d838      	bhi.n	8006194 <__ssputs_r+0x84>
 8006122:	898a      	ldrh	r2, [r1, #12]
 8006124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006128:	d032      	beq.n	8006190 <__ssputs_r+0x80>
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	6909      	ldr	r1, [r1, #16]
 800612e:	eba5 0901 	sub.w	r9, r5, r1
 8006132:	6965      	ldr	r5, [r4, #20]
 8006134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800613c:	3301      	adds	r3, #1
 800613e:	444b      	add	r3, r9
 8006140:	106d      	asrs	r5, r5, #1
 8006142:	429d      	cmp	r5, r3
 8006144:	bf38      	it	cc
 8006146:	461d      	movcc	r5, r3
 8006148:	0553      	lsls	r3, r2, #21
 800614a:	d531      	bpl.n	80061b0 <__ssputs_r+0xa0>
 800614c:	4629      	mov	r1, r5
 800614e:	f000 fb63 	bl	8006818 <_malloc_r>
 8006152:	4606      	mov	r6, r0
 8006154:	b950      	cbnz	r0, 800616c <__ssputs_r+0x5c>
 8006156:	230c      	movs	r3, #12
 8006158:	f8ca 3000 	str.w	r3, [sl]
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	6921      	ldr	r1, [r4, #16]
 800616e:	464a      	mov	r2, r9
 8006170:	f000 fabe 	bl	80066f0 <memcpy>
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800617a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	6126      	str	r6, [r4, #16]
 8006182:	6165      	str	r5, [r4, #20]
 8006184:	444e      	add	r6, r9
 8006186:	eba5 0509 	sub.w	r5, r5, r9
 800618a:	6026      	str	r6, [r4, #0]
 800618c:	60a5      	str	r5, [r4, #8]
 800618e:	463e      	mov	r6, r7
 8006190:	42be      	cmp	r6, r7
 8006192:	d900      	bls.n	8006196 <__ssputs_r+0x86>
 8006194:	463e      	mov	r6, r7
 8006196:	6820      	ldr	r0, [r4, #0]
 8006198:	4632      	mov	r2, r6
 800619a:	4641      	mov	r1, r8
 800619c:	f000 fab6 	bl	800670c <memmove>
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	1b9b      	subs	r3, r3, r6
 80061a4:	60a3      	str	r3, [r4, #8]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	4433      	add	r3, r6
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	2000      	movs	r0, #0
 80061ae:	e7db      	b.n	8006168 <__ssputs_r+0x58>
 80061b0:	462a      	mov	r2, r5
 80061b2:	f000 fba5 	bl	8006900 <_realloc_r>
 80061b6:	4606      	mov	r6, r0
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d1e1      	bne.n	8006180 <__ssputs_r+0x70>
 80061bc:	6921      	ldr	r1, [r4, #16]
 80061be:	4650      	mov	r0, sl
 80061c0:	f000 fabe 	bl	8006740 <_free_r>
 80061c4:	e7c7      	b.n	8006156 <__ssputs_r+0x46>
	...

080061c8 <_svfiprintf_r>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	4698      	mov	r8, r3
 80061ce:	898b      	ldrh	r3, [r1, #12]
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	b09d      	sub	sp, #116	; 0x74
 80061d4:	4607      	mov	r7, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	d50e      	bpl.n	80061fa <_svfiprintf_r+0x32>
 80061dc:	690b      	ldr	r3, [r1, #16]
 80061de:	b963      	cbnz	r3, 80061fa <_svfiprintf_r+0x32>
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	f000 fb19 	bl	8006818 <_malloc_r>
 80061e6:	6028      	str	r0, [r5, #0]
 80061e8:	6128      	str	r0, [r5, #16]
 80061ea:	b920      	cbnz	r0, 80061f6 <_svfiprintf_r+0x2e>
 80061ec:	230c      	movs	r3, #12
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	e0d1      	b.n	800639a <_svfiprintf_r+0x1d2>
 80061f6:	2340      	movs	r3, #64	; 0x40
 80061f8:	616b      	str	r3, [r5, #20]
 80061fa:	2300      	movs	r3, #0
 80061fc:	9309      	str	r3, [sp, #36]	; 0x24
 80061fe:	2320      	movs	r3, #32
 8006200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006204:	f8cd 800c 	str.w	r8, [sp, #12]
 8006208:	2330      	movs	r3, #48	; 0x30
 800620a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063b4 <_svfiprintf_r+0x1ec>
 800620e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006212:	f04f 0901 	mov.w	r9, #1
 8006216:	4623      	mov	r3, r4
 8006218:	469a      	mov	sl, r3
 800621a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800621e:	b10a      	cbz	r2, 8006224 <_svfiprintf_r+0x5c>
 8006220:	2a25      	cmp	r2, #37	; 0x25
 8006222:	d1f9      	bne.n	8006218 <_svfiprintf_r+0x50>
 8006224:	ebba 0b04 	subs.w	fp, sl, r4
 8006228:	d00b      	beq.n	8006242 <_svfiprintf_r+0x7a>
 800622a:	465b      	mov	r3, fp
 800622c:	4622      	mov	r2, r4
 800622e:	4629      	mov	r1, r5
 8006230:	4638      	mov	r0, r7
 8006232:	f7ff ff6d 	bl	8006110 <__ssputs_r>
 8006236:	3001      	adds	r0, #1
 8006238:	f000 80aa 	beq.w	8006390 <_svfiprintf_r+0x1c8>
 800623c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800623e:	445a      	add	r2, fp
 8006240:	9209      	str	r2, [sp, #36]	; 0x24
 8006242:	f89a 3000 	ldrb.w	r3, [sl]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80a2 	beq.w	8006390 <_svfiprintf_r+0x1c8>
 800624c:	2300      	movs	r3, #0
 800624e:	f04f 32ff 	mov.w	r2, #4294967295
 8006252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006256:	f10a 0a01 	add.w	sl, sl, #1
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	9307      	str	r3, [sp, #28]
 800625e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006262:	931a      	str	r3, [sp, #104]	; 0x68
 8006264:	4654      	mov	r4, sl
 8006266:	2205      	movs	r2, #5
 8006268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626c:	4851      	ldr	r0, [pc, #324]	; (80063b4 <_svfiprintf_r+0x1ec>)
 800626e:	f7f9 ffb7 	bl	80001e0 <memchr>
 8006272:	9a04      	ldr	r2, [sp, #16]
 8006274:	b9d8      	cbnz	r0, 80062ae <_svfiprintf_r+0xe6>
 8006276:	06d0      	lsls	r0, r2, #27
 8006278:	bf44      	itt	mi
 800627a:	2320      	movmi	r3, #32
 800627c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006280:	0711      	lsls	r1, r2, #28
 8006282:	bf44      	itt	mi
 8006284:	232b      	movmi	r3, #43	; 0x2b
 8006286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800628a:	f89a 3000 	ldrb.w	r3, [sl]
 800628e:	2b2a      	cmp	r3, #42	; 0x2a
 8006290:	d015      	beq.n	80062be <_svfiprintf_r+0xf6>
 8006292:	9a07      	ldr	r2, [sp, #28]
 8006294:	4654      	mov	r4, sl
 8006296:	2000      	movs	r0, #0
 8006298:	f04f 0c0a 	mov.w	ip, #10
 800629c:	4621      	mov	r1, r4
 800629e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062a2:	3b30      	subs	r3, #48	; 0x30
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	d94e      	bls.n	8006346 <_svfiprintf_r+0x17e>
 80062a8:	b1b0      	cbz	r0, 80062d8 <_svfiprintf_r+0x110>
 80062aa:	9207      	str	r2, [sp, #28]
 80062ac:	e014      	b.n	80062d8 <_svfiprintf_r+0x110>
 80062ae:	eba0 0308 	sub.w	r3, r0, r8
 80062b2:	fa09 f303 	lsl.w	r3, r9, r3
 80062b6:	4313      	orrs	r3, r2
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	46a2      	mov	sl, r4
 80062bc:	e7d2      	b.n	8006264 <_svfiprintf_r+0x9c>
 80062be:	9b03      	ldr	r3, [sp, #12]
 80062c0:	1d19      	adds	r1, r3, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	9103      	str	r1, [sp, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfbb      	ittet	lt
 80062ca:	425b      	neglt	r3, r3
 80062cc:	f042 0202 	orrlt.w	r2, r2, #2
 80062d0:	9307      	strge	r3, [sp, #28]
 80062d2:	9307      	strlt	r3, [sp, #28]
 80062d4:	bfb8      	it	lt
 80062d6:	9204      	strlt	r2, [sp, #16]
 80062d8:	7823      	ldrb	r3, [r4, #0]
 80062da:	2b2e      	cmp	r3, #46	; 0x2e
 80062dc:	d10c      	bne.n	80062f8 <_svfiprintf_r+0x130>
 80062de:	7863      	ldrb	r3, [r4, #1]
 80062e0:	2b2a      	cmp	r3, #42	; 0x2a
 80062e2:	d135      	bne.n	8006350 <_svfiprintf_r+0x188>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	1d1a      	adds	r2, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	9203      	str	r2, [sp, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bfb8      	it	lt
 80062f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80062f4:	3402      	adds	r4, #2
 80062f6:	9305      	str	r3, [sp, #20]
 80062f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063c4 <_svfiprintf_r+0x1fc>
 80062fc:	7821      	ldrb	r1, [r4, #0]
 80062fe:	2203      	movs	r2, #3
 8006300:	4650      	mov	r0, sl
 8006302:	f7f9 ff6d 	bl	80001e0 <memchr>
 8006306:	b140      	cbz	r0, 800631a <_svfiprintf_r+0x152>
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	eba0 000a 	sub.w	r0, r0, sl
 800630e:	fa03 f000 	lsl.w	r0, r3, r0
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	4303      	orrs	r3, r0
 8006316:	3401      	adds	r4, #1
 8006318:	9304      	str	r3, [sp, #16]
 800631a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631e:	4826      	ldr	r0, [pc, #152]	; (80063b8 <_svfiprintf_r+0x1f0>)
 8006320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006324:	2206      	movs	r2, #6
 8006326:	f7f9 ff5b 	bl	80001e0 <memchr>
 800632a:	2800      	cmp	r0, #0
 800632c:	d038      	beq.n	80063a0 <_svfiprintf_r+0x1d8>
 800632e:	4b23      	ldr	r3, [pc, #140]	; (80063bc <_svfiprintf_r+0x1f4>)
 8006330:	bb1b      	cbnz	r3, 800637a <_svfiprintf_r+0x1b2>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	3307      	adds	r3, #7
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	3308      	adds	r3, #8
 800633c:	9303      	str	r3, [sp, #12]
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	4433      	add	r3, r6
 8006342:	9309      	str	r3, [sp, #36]	; 0x24
 8006344:	e767      	b.n	8006216 <_svfiprintf_r+0x4e>
 8006346:	fb0c 3202 	mla	r2, ip, r2, r3
 800634a:	460c      	mov	r4, r1
 800634c:	2001      	movs	r0, #1
 800634e:	e7a5      	b.n	800629c <_svfiprintf_r+0xd4>
 8006350:	2300      	movs	r3, #0
 8006352:	3401      	adds	r4, #1
 8006354:	9305      	str	r3, [sp, #20]
 8006356:	4619      	mov	r1, r3
 8006358:	f04f 0c0a 	mov.w	ip, #10
 800635c:	4620      	mov	r0, r4
 800635e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006362:	3a30      	subs	r2, #48	; 0x30
 8006364:	2a09      	cmp	r2, #9
 8006366:	d903      	bls.n	8006370 <_svfiprintf_r+0x1a8>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0c5      	beq.n	80062f8 <_svfiprintf_r+0x130>
 800636c:	9105      	str	r1, [sp, #20]
 800636e:	e7c3      	b.n	80062f8 <_svfiprintf_r+0x130>
 8006370:	fb0c 2101 	mla	r1, ip, r1, r2
 8006374:	4604      	mov	r4, r0
 8006376:	2301      	movs	r3, #1
 8006378:	e7f0      	b.n	800635c <_svfiprintf_r+0x194>
 800637a:	ab03      	add	r3, sp, #12
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	462a      	mov	r2, r5
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <_svfiprintf_r+0x1f8>)
 8006382:	a904      	add	r1, sp, #16
 8006384:	4638      	mov	r0, r7
 8006386:	f3af 8000 	nop.w
 800638a:	1c42      	adds	r2, r0, #1
 800638c:	4606      	mov	r6, r0
 800638e:	d1d6      	bne.n	800633e <_svfiprintf_r+0x176>
 8006390:	89ab      	ldrh	r3, [r5, #12]
 8006392:	065b      	lsls	r3, r3, #25
 8006394:	f53f af2c 	bmi.w	80061f0 <_svfiprintf_r+0x28>
 8006398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800639a:	b01d      	add	sp, #116	; 0x74
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	ab03      	add	r3, sp, #12
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	462a      	mov	r2, r5
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <_svfiprintf_r+0x1f8>)
 80063a8:	a904      	add	r1, sp, #16
 80063aa:	4638      	mov	r0, r7
 80063ac:	f000 f87a 	bl	80064a4 <_printf_i>
 80063b0:	e7eb      	b.n	800638a <_svfiprintf_r+0x1c2>
 80063b2:	bf00      	nop
 80063b4:	08006a24 	.word	0x08006a24
 80063b8:	08006a2e 	.word	0x08006a2e
 80063bc:	00000000 	.word	0x00000000
 80063c0:	08006111 	.word	0x08006111
 80063c4:	08006a2a 	.word	0x08006a2a

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4616      	mov	r6, r2
 80063ce:	4699      	mov	r9, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfb8      	it	lt
 80063dc:	4613      	movlt	r3, r2
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063e4:	4607      	mov	r7, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b10a      	cbz	r2, 80063ee <_printf_common+0x26>
 80063ea:	3301      	adds	r3, #1
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	0699      	lsls	r1, r3, #26
 80063f2:	bf42      	ittt	mi
 80063f4:	6833      	ldrmi	r3, [r6, #0]
 80063f6:	3302      	addmi	r3, #2
 80063f8:	6033      	strmi	r3, [r6, #0]
 80063fa:	6825      	ldr	r5, [r4, #0]
 80063fc:	f015 0506 	ands.w	r5, r5, #6
 8006400:	d106      	bne.n	8006410 <_printf_common+0x48>
 8006402:	f104 0a19 	add.w	sl, r4, #25
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	6832      	ldr	r2, [r6, #0]
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	42ab      	cmp	r3, r5
 800640e:	dc26      	bgt.n	800645e <_printf_common+0x96>
 8006410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006414:	1e13      	subs	r3, r2, #0
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	2301      	movne	r3, #1
 800641c:	0692      	lsls	r2, r2, #26
 800641e:	d42b      	bmi.n	8006478 <_printf_common+0xb0>
 8006420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006424:	4649      	mov	r1, r9
 8006426:	4638      	mov	r0, r7
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d01e      	beq.n	800646c <_printf_common+0xa4>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	68e5      	ldr	r5, [r4, #12]
 8006432:	6832      	ldr	r2, [r6, #0]
 8006434:	f003 0306 	and.w	r3, r3, #6
 8006438:	2b04      	cmp	r3, #4
 800643a:	bf08      	it	eq
 800643c:	1aad      	subeq	r5, r5, r2
 800643e:	68a3      	ldr	r3, [r4, #8]
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	bf0c      	ite	eq
 8006444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006448:	2500      	movne	r5, #0
 800644a:	4293      	cmp	r3, r2
 800644c:	bfc4      	itt	gt
 800644e:	1a9b      	subgt	r3, r3, r2
 8006450:	18ed      	addgt	r5, r5, r3
 8006452:	2600      	movs	r6, #0
 8006454:	341a      	adds	r4, #26
 8006456:	42b5      	cmp	r5, r6
 8006458:	d11a      	bne.n	8006490 <_printf_common+0xc8>
 800645a:	2000      	movs	r0, #0
 800645c:	e008      	b.n	8006470 <_printf_common+0xa8>
 800645e:	2301      	movs	r3, #1
 8006460:	4652      	mov	r2, sl
 8006462:	4649      	mov	r1, r9
 8006464:	4638      	mov	r0, r7
 8006466:	47c0      	blx	r8
 8006468:	3001      	adds	r0, #1
 800646a:	d103      	bne.n	8006474 <_printf_common+0xac>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	3501      	adds	r5, #1
 8006476:	e7c6      	b.n	8006406 <_printf_common+0x3e>
 8006478:	18e1      	adds	r1, r4, r3
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	2030      	movs	r0, #48	; 0x30
 800647e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006482:	4422      	add	r2, r4
 8006484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800648c:	3302      	adds	r3, #2
 800648e:	e7c7      	b.n	8006420 <_printf_common+0x58>
 8006490:	2301      	movs	r3, #1
 8006492:	4622      	mov	r2, r4
 8006494:	4649      	mov	r1, r9
 8006496:	4638      	mov	r0, r7
 8006498:	47c0      	blx	r8
 800649a:	3001      	adds	r0, #1
 800649c:	d0e6      	beq.n	800646c <_printf_common+0xa4>
 800649e:	3601      	adds	r6, #1
 80064a0:	e7d9      	b.n	8006456 <_printf_common+0x8e>
	...

080064a4 <_printf_i>:
 80064a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	7e0f      	ldrb	r7, [r1, #24]
 80064aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064ac:	2f78      	cmp	r7, #120	; 0x78
 80064ae:	4691      	mov	r9, r2
 80064b0:	4680      	mov	r8, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	469a      	mov	sl, r3
 80064b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ba:	d807      	bhi.n	80064cc <_printf_i+0x28>
 80064bc:	2f62      	cmp	r7, #98	; 0x62
 80064be:	d80a      	bhi.n	80064d6 <_printf_i+0x32>
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	f000 80d8 	beq.w	8006676 <_printf_i+0x1d2>
 80064c6:	2f58      	cmp	r7, #88	; 0x58
 80064c8:	f000 80a3 	beq.w	8006612 <_printf_i+0x16e>
 80064cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064d4:	e03a      	b.n	800654c <_printf_i+0xa8>
 80064d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064da:	2b15      	cmp	r3, #21
 80064dc:	d8f6      	bhi.n	80064cc <_printf_i+0x28>
 80064de:	a101      	add	r1, pc, #4	; (adr r1, 80064e4 <_printf_i+0x40>)
 80064e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	08006551 	.word	0x08006551
 80064ec:	080064cd 	.word	0x080064cd
 80064f0:	080064cd 	.word	0x080064cd
 80064f4:	080064cd 	.word	0x080064cd
 80064f8:	080064cd 	.word	0x080064cd
 80064fc:	08006551 	.word	0x08006551
 8006500:	080064cd 	.word	0x080064cd
 8006504:	080064cd 	.word	0x080064cd
 8006508:	080064cd 	.word	0x080064cd
 800650c:	080064cd 	.word	0x080064cd
 8006510:	0800665d 	.word	0x0800665d
 8006514:	08006581 	.word	0x08006581
 8006518:	0800663f 	.word	0x0800663f
 800651c:	080064cd 	.word	0x080064cd
 8006520:	080064cd 	.word	0x080064cd
 8006524:	0800667f 	.word	0x0800667f
 8006528:	080064cd 	.word	0x080064cd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064cd 	.word	0x080064cd
 8006534:	080064cd 	.word	0x080064cd
 8006538:	08006647 	.word	0x08006647
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	602a      	str	r2, [r5, #0]
 8006544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800654c:	2301      	movs	r3, #1
 800654e:	e0a3      	b.n	8006698 <_printf_i+0x1f4>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	6829      	ldr	r1, [r5, #0]
 8006554:	0606      	lsls	r6, r0, #24
 8006556:	f101 0304 	add.w	r3, r1, #4
 800655a:	d50a      	bpl.n	8006572 <_printf_i+0xce>
 800655c:	680e      	ldr	r6, [r1, #0]
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	2e00      	cmp	r6, #0
 8006562:	da03      	bge.n	800656c <_printf_i+0xc8>
 8006564:	232d      	movs	r3, #45	; 0x2d
 8006566:	4276      	negs	r6, r6
 8006568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656c:	485e      	ldr	r0, [pc, #376]	; (80066e8 <_printf_i+0x244>)
 800656e:	230a      	movs	r3, #10
 8006570:	e019      	b.n	80065a6 <_printf_i+0x102>
 8006572:	680e      	ldr	r6, [r1, #0]
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800657a:	bf18      	it	ne
 800657c:	b236      	sxthne	r6, r6
 800657e:	e7ef      	b.n	8006560 <_printf_i+0xbc>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	6029      	str	r1, [r5, #0]
 8006588:	0601      	lsls	r1, r0, #24
 800658a:	d501      	bpl.n	8006590 <_printf_i+0xec>
 800658c:	681e      	ldr	r6, [r3, #0]
 800658e:	e002      	b.n	8006596 <_printf_i+0xf2>
 8006590:	0646      	lsls	r6, r0, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0xe8>
 8006594:	881e      	ldrh	r6, [r3, #0]
 8006596:	4854      	ldr	r0, [pc, #336]	; (80066e8 <_printf_i+0x244>)
 8006598:	2f6f      	cmp	r7, #111	; 0x6f
 800659a:	bf0c      	ite	eq
 800659c:	2308      	moveq	r3, #8
 800659e:	230a      	movne	r3, #10
 80065a0:	2100      	movs	r1, #0
 80065a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065a6:	6865      	ldr	r5, [r4, #4]
 80065a8:	60a5      	str	r5, [r4, #8]
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	bfa2      	ittt	ge
 80065ae:	6821      	ldrge	r1, [r4, #0]
 80065b0:	f021 0104 	bicge.w	r1, r1, #4
 80065b4:	6021      	strge	r1, [r4, #0]
 80065b6:	b90e      	cbnz	r6, 80065bc <_printf_i+0x118>
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	d04d      	beq.n	8006658 <_printf_i+0x1b4>
 80065bc:	4615      	mov	r5, r2
 80065be:	fbb6 f1f3 	udiv	r1, r6, r3
 80065c2:	fb03 6711 	mls	r7, r3, r1, r6
 80065c6:	5dc7      	ldrb	r7, [r0, r7]
 80065c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065cc:	4637      	mov	r7, r6
 80065ce:	42bb      	cmp	r3, r7
 80065d0:	460e      	mov	r6, r1
 80065d2:	d9f4      	bls.n	80065be <_printf_i+0x11a>
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d10b      	bne.n	80065f0 <_printf_i+0x14c>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	07de      	lsls	r6, r3, #31
 80065dc:	d508      	bpl.n	80065f0 <_printf_i+0x14c>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	6861      	ldr	r1, [r4, #4]
 80065e2:	4299      	cmp	r1, r3
 80065e4:	bfde      	ittt	le
 80065e6:	2330      	movle	r3, #48	; 0x30
 80065e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065f0:	1b52      	subs	r2, r2, r5
 80065f2:	6122      	str	r2, [r4, #16]
 80065f4:	f8cd a000 	str.w	sl, [sp]
 80065f8:	464b      	mov	r3, r9
 80065fa:	aa03      	add	r2, sp, #12
 80065fc:	4621      	mov	r1, r4
 80065fe:	4640      	mov	r0, r8
 8006600:	f7ff fee2 	bl	80063c8 <_printf_common>
 8006604:	3001      	adds	r0, #1
 8006606:	d14c      	bne.n	80066a2 <_printf_i+0x1fe>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	b004      	add	sp, #16
 800660e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006612:	4835      	ldr	r0, [pc, #212]	; (80066e8 <_printf_i+0x244>)
 8006614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006618:	6829      	ldr	r1, [r5, #0]
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006620:	6029      	str	r1, [r5, #0]
 8006622:	061d      	lsls	r5, r3, #24
 8006624:	d514      	bpl.n	8006650 <_printf_i+0x1ac>
 8006626:	07df      	lsls	r7, r3, #31
 8006628:	bf44      	itt	mi
 800662a:	f043 0320 	orrmi.w	r3, r3, #32
 800662e:	6023      	strmi	r3, [r4, #0]
 8006630:	b91e      	cbnz	r6, 800663a <_printf_i+0x196>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f023 0320 	bic.w	r3, r3, #32
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	2310      	movs	r3, #16
 800663c:	e7b0      	b.n	80065a0 <_printf_i+0xfc>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f043 0320 	orr.w	r3, r3, #32
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	2378      	movs	r3, #120	; 0x78
 8006648:	4828      	ldr	r0, [pc, #160]	; (80066ec <_printf_i+0x248>)
 800664a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800664e:	e7e3      	b.n	8006618 <_printf_i+0x174>
 8006650:	0659      	lsls	r1, r3, #25
 8006652:	bf48      	it	mi
 8006654:	b2b6      	uxthmi	r6, r6
 8006656:	e7e6      	b.n	8006626 <_printf_i+0x182>
 8006658:	4615      	mov	r5, r2
 800665a:	e7bb      	b.n	80065d4 <_printf_i+0x130>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	6826      	ldr	r6, [r4, #0]
 8006660:	6961      	ldr	r1, [r4, #20]
 8006662:	1d18      	adds	r0, r3, #4
 8006664:	6028      	str	r0, [r5, #0]
 8006666:	0635      	lsls	r5, r6, #24
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	d501      	bpl.n	8006670 <_printf_i+0x1cc>
 800666c:	6019      	str	r1, [r3, #0]
 800666e:	e002      	b.n	8006676 <_printf_i+0x1d2>
 8006670:	0670      	lsls	r0, r6, #25
 8006672:	d5fb      	bpl.n	800666c <_printf_i+0x1c8>
 8006674:	8019      	strh	r1, [r3, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	4615      	mov	r5, r2
 800667c:	e7ba      	b.n	80065f4 <_printf_i+0x150>
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	602a      	str	r2, [r5, #0]
 8006684:	681d      	ldr	r5, [r3, #0]
 8006686:	6862      	ldr	r2, [r4, #4]
 8006688:	2100      	movs	r1, #0
 800668a:	4628      	mov	r0, r5
 800668c:	f7f9 fda8 	bl	80001e0 <memchr>
 8006690:	b108      	cbz	r0, 8006696 <_printf_i+0x1f2>
 8006692:	1b40      	subs	r0, r0, r5
 8006694:	6060      	str	r0, [r4, #4]
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	2300      	movs	r3, #0
 800669c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a0:	e7a8      	b.n	80065f4 <_printf_i+0x150>
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	462a      	mov	r2, r5
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	47d0      	blx	sl
 80066ac:	3001      	adds	r0, #1
 80066ae:	d0ab      	beq.n	8006608 <_printf_i+0x164>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	079b      	lsls	r3, r3, #30
 80066b4:	d413      	bmi.n	80066de <_printf_i+0x23a>
 80066b6:	68e0      	ldr	r0, [r4, #12]
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	4298      	cmp	r0, r3
 80066bc:	bfb8      	it	lt
 80066be:	4618      	movlt	r0, r3
 80066c0:	e7a4      	b.n	800660c <_printf_i+0x168>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4632      	mov	r2, r6
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	47d0      	blx	sl
 80066cc:	3001      	adds	r0, #1
 80066ce:	d09b      	beq.n	8006608 <_printf_i+0x164>
 80066d0:	3501      	adds	r5, #1
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	9903      	ldr	r1, [sp, #12]
 80066d6:	1a5b      	subs	r3, r3, r1
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dcf2      	bgt.n	80066c2 <_printf_i+0x21e>
 80066dc:	e7eb      	b.n	80066b6 <_printf_i+0x212>
 80066de:	2500      	movs	r5, #0
 80066e0:	f104 0619 	add.w	r6, r4, #25
 80066e4:	e7f5      	b.n	80066d2 <_printf_i+0x22e>
 80066e6:	bf00      	nop
 80066e8:	08006a35 	.word	0x08006a35
 80066ec:	08006a46 	.word	0x08006a46

080066f0 <memcpy>:
 80066f0:	440a      	add	r2, r1
 80066f2:	4291      	cmp	r1, r2
 80066f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f8:	d100      	bne.n	80066fc <memcpy+0xc>
 80066fa:	4770      	bx	lr
 80066fc:	b510      	push	{r4, lr}
 80066fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006706:	4291      	cmp	r1, r2
 8006708:	d1f9      	bne.n	80066fe <memcpy+0xe>
 800670a:	bd10      	pop	{r4, pc}

0800670c <memmove>:
 800670c:	4288      	cmp	r0, r1
 800670e:	b510      	push	{r4, lr}
 8006710:	eb01 0402 	add.w	r4, r1, r2
 8006714:	d902      	bls.n	800671c <memmove+0x10>
 8006716:	4284      	cmp	r4, r0
 8006718:	4623      	mov	r3, r4
 800671a:	d807      	bhi.n	800672c <memmove+0x20>
 800671c:	1e43      	subs	r3, r0, #1
 800671e:	42a1      	cmp	r1, r4
 8006720:	d008      	beq.n	8006734 <memmove+0x28>
 8006722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800672a:	e7f8      	b.n	800671e <memmove+0x12>
 800672c:	4402      	add	r2, r0
 800672e:	4601      	mov	r1, r0
 8006730:	428a      	cmp	r2, r1
 8006732:	d100      	bne.n	8006736 <memmove+0x2a>
 8006734:	bd10      	pop	{r4, pc}
 8006736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800673a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800673e:	e7f7      	b.n	8006730 <memmove+0x24>

08006740 <_free_r>:
 8006740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006742:	2900      	cmp	r1, #0
 8006744:	d044      	beq.n	80067d0 <_free_r+0x90>
 8006746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674a:	9001      	str	r0, [sp, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f1a1 0404 	sub.w	r4, r1, #4
 8006752:	bfb8      	it	lt
 8006754:	18e4      	addlt	r4, r4, r3
 8006756:	f000 f913 	bl	8006980 <__malloc_lock>
 800675a:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <_free_r+0x94>)
 800675c:	9801      	ldr	r0, [sp, #4]
 800675e:	6813      	ldr	r3, [r2, #0]
 8006760:	b933      	cbnz	r3, 8006770 <_free_r+0x30>
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	6014      	str	r4, [r2, #0]
 8006766:	b003      	add	sp, #12
 8006768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800676c:	f000 b90e 	b.w	800698c <__malloc_unlock>
 8006770:	42a3      	cmp	r3, r4
 8006772:	d908      	bls.n	8006786 <_free_r+0x46>
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	1961      	adds	r1, r4, r5
 8006778:	428b      	cmp	r3, r1
 800677a:	bf01      	itttt	eq
 800677c:	6819      	ldreq	r1, [r3, #0]
 800677e:	685b      	ldreq	r3, [r3, #4]
 8006780:	1949      	addeq	r1, r1, r5
 8006782:	6021      	streq	r1, [r4, #0]
 8006784:	e7ed      	b.n	8006762 <_free_r+0x22>
 8006786:	461a      	mov	r2, r3
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b10b      	cbz	r3, 8006790 <_free_r+0x50>
 800678c:	42a3      	cmp	r3, r4
 800678e:	d9fa      	bls.n	8006786 <_free_r+0x46>
 8006790:	6811      	ldr	r1, [r2, #0]
 8006792:	1855      	adds	r5, r2, r1
 8006794:	42a5      	cmp	r5, r4
 8006796:	d10b      	bne.n	80067b0 <_free_r+0x70>
 8006798:	6824      	ldr	r4, [r4, #0]
 800679a:	4421      	add	r1, r4
 800679c:	1854      	adds	r4, r2, r1
 800679e:	42a3      	cmp	r3, r4
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	d1e0      	bne.n	8006766 <_free_r+0x26>
 80067a4:	681c      	ldr	r4, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	6053      	str	r3, [r2, #4]
 80067aa:	4421      	add	r1, r4
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	e7da      	b.n	8006766 <_free_r+0x26>
 80067b0:	d902      	bls.n	80067b8 <_free_r+0x78>
 80067b2:	230c      	movs	r3, #12
 80067b4:	6003      	str	r3, [r0, #0]
 80067b6:	e7d6      	b.n	8006766 <_free_r+0x26>
 80067b8:	6825      	ldr	r5, [r4, #0]
 80067ba:	1961      	adds	r1, r4, r5
 80067bc:	428b      	cmp	r3, r1
 80067be:	bf04      	itt	eq
 80067c0:	6819      	ldreq	r1, [r3, #0]
 80067c2:	685b      	ldreq	r3, [r3, #4]
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	bf04      	itt	eq
 80067c8:	1949      	addeq	r1, r1, r5
 80067ca:	6021      	streq	r1, [r4, #0]
 80067cc:	6054      	str	r4, [r2, #4]
 80067ce:	e7ca      	b.n	8006766 <_free_r+0x26>
 80067d0:	b003      	add	sp, #12
 80067d2:	bd30      	pop	{r4, r5, pc}
 80067d4:	20000224 	.word	0x20000224

080067d8 <sbrk_aligned>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	4e0e      	ldr	r6, [pc, #56]	; (8006814 <sbrk_aligned+0x3c>)
 80067dc:	460c      	mov	r4, r1
 80067de:	6831      	ldr	r1, [r6, #0]
 80067e0:	4605      	mov	r5, r0
 80067e2:	b911      	cbnz	r1, 80067ea <sbrk_aligned+0x12>
 80067e4:	f000 f8bc 	bl	8006960 <_sbrk_r>
 80067e8:	6030      	str	r0, [r6, #0]
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f8b7 	bl	8006960 <_sbrk_r>
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	d00a      	beq.n	800680c <sbrk_aligned+0x34>
 80067f6:	1cc4      	adds	r4, r0, #3
 80067f8:	f024 0403 	bic.w	r4, r4, #3
 80067fc:	42a0      	cmp	r0, r4
 80067fe:	d007      	beq.n	8006810 <sbrk_aligned+0x38>
 8006800:	1a21      	subs	r1, r4, r0
 8006802:	4628      	mov	r0, r5
 8006804:	f000 f8ac 	bl	8006960 <_sbrk_r>
 8006808:	3001      	adds	r0, #1
 800680a:	d101      	bne.n	8006810 <sbrk_aligned+0x38>
 800680c:	f04f 34ff 	mov.w	r4, #4294967295
 8006810:	4620      	mov	r0, r4
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	20000228 	.word	0x20000228

08006818 <_malloc_r>:
 8006818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681c:	1ccd      	adds	r5, r1, #3
 800681e:	f025 0503 	bic.w	r5, r5, #3
 8006822:	3508      	adds	r5, #8
 8006824:	2d0c      	cmp	r5, #12
 8006826:	bf38      	it	cc
 8006828:	250c      	movcc	r5, #12
 800682a:	2d00      	cmp	r5, #0
 800682c:	4607      	mov	r7, r0
 800682e:	db01      	blt.n	8006834 <_malloc_r+0x1c>
 8006830:	42a9      	cmp	r1, r5
 8006832:	d905      	bls.n	8006840 <_malloc_r+0x28>
 8006834:	230c      	movs	r3, #12
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	2600      	movs	r6, #0
 800683a:	4630      	mov	r0, r6
 800683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006840:	4e2e      	ldr	r6, [pc, #184]	; (80068fc <_malloc_r+0xe4>)
 8006842:	f000 f89d 	bl	8006980 <__malloc_lock>
 8006846:	6833      	ldr	r3, [r6, #0]
 8006848:	461c      	mov	r4, r3
 800684a:	bb34      	cbnz	r4, 800689a <_malloc_r+0x82>
 800684c:	4629      	mov	r1, r5
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ffc2 	bl	80067d8 <sbrk_aligned>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	4604      	mov	r4, r0
 8006858:	d14d      	bne.n	80068f6 <_malloc_r+0xde>
 800685a:	6834      	ldr	r4, [r6, #0]
 800685c:	4626      	mov	r6, r4
 800685e:	2e00      	cmp	r6, #0
 8006860:	d140      	bne.n	80068e4 <_malloc_r+0xcc>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	4631      	mov	r1, r6
 8006866:	4638      	mov	r0, r7
 8006868:	eb04 0803 	add.w	r8, r4, r3
 800686c:	f000 f878 	bl	8006960 <_sbrk_r>
 8006870:	4580      	cmp	r8, r0
 8006872:	d13a      	bne.n	80068ea <_malloc_r+0xd2>
 8006874:	6821      	ldr	r1, [r4, #0]
 8006876:	3503      	adds	r5, #3
 8006878:	1a6d      	subs	r5, r5, r1
 800687a:	f025 0503 	bic.w	r5, r5, #3
 800687e:	3508      	adds	r5, #8
 8006880:	2d0c      	cmp	r5, #12
 8006882:	bf38      	it	cc
 8006884:	250c      	movcc	r5, #12
 8006886:	4629      	mov	r1, r5
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ffa5 	bl	80067d8 <sbrk_aligned>
 800688e:	3001      	adds	r0, #1
 8006890:	d02b      	beq.n	80068ea <_malloc_r+0xd2>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	442b      	add	r3, r5
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	e00e      	b.n	80068b8 <_malloc_r+0xa0>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	1b52      	subs	r2, r2, r5
 800689e:	d41e      	bmi.n	80068de <_malloc_r+0xc6>
 80068a0:	2a0b      	cmp	r2, #11
 80068a2:	d916      	bls.n	80068d2 <_malloc_r+0xba>
 80068a4:	1961      	adds	r1, r4, r5
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	6025      	str	r5, [r4, #0]
 80068aa:	bf18      	it	ne
 80068ac:	6059      	strne	r1, [r3, #4]
 80068ae:	6863      	ldr	r3, [r4, #4]
 80068b0:	bf08      	it	eq
 80068b2:	6031      	streq	r1, [r6, #0]
 80068b4:	5162      	str	r2, [r4, r5]
 80068b6:	604b      	str	r3, [r1, #4]
 80068b8:	4638      	mov	r0, r7
 80068ba:	f104 060b 	add.w	r6, r4, #11
 80068be:	f000 f865 	bl	800698c <__malloc_unlock>
 80068c2:	f026 0607 	bic.w	r6, r6, #7
 80068c6:	1d23      	adds	r3, r4, #4
 80068c8:	1af2      	subs	r2, r6, r3
 80068ca:	d0b6      	beq.n	800683a <_malloc_r+0x22>
 80068cc:	1b9b      	subs	r3, r3, r6
 80068ce:	50a3      	str	r3, [r4, r2]
 80068d0:	e7b3      	b.n	800683a <_malloc_r+0x22>
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	bf0c      	ite	eq
 80068d8:	6032      	streq	r2, [r6, #0]
 80068da:	605a      	strne	r2, [r3, #4]
 80068dc:	e7ec      	b.n	80068b8 <_malloc_r+0xa0>
 80068de:	4623      	mov	r3, r4
 80068e0:	6864      	ldr	r4, [r4, #4]
 80068e2:	e7b2      	b.n	800684a <_malloc_r+0x32>
 80068e4:	4634      	mov	r4, r6
 80068e6:	6876      	ldr	r6, [r6, #4]
 80068e8:	e7b9      	b.n	800685e <_malloc_r+0x46>
 80068ea:	230c      	movs	r3, #12
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	4638      	mov	r0, r7
 80068f0:	f000 f84c 	bl	800698c <__malloc_unlock>
 80068f4:	e7a1      	b.n	800683a <_malloc_r+0x22>
 80068f6:	6025      	str	r5, [r4, #0]
 80068f8:	e7de      	b.n	80068b8 <_malloc_r+0xa0>
 80068fa:	bf00      	nop
 80068fc:	20000224 	.word	0x20000224

08006900 <_realloc_r>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	4680      	mov	r8, r0
 8006906:	4614      	mov	r4, r2
 8006908:	460e      	mov	r6, r1
 800690a:	b921      	cbnz	r1, 8006916 <_realloc_r+0x16>
 800690c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	4611      	mov	r1, r2
 8006912:	f7ff bf81 	b.w	8006818 <_malloc_r>
 8006916:	b92a      	cbnz	r2, 8006924 <_realloc_r+0x24>
 8006918:	f7ff ff12 	bl	8006740 <_free_r>
 800691c:	4625      	mov	r5, r4
 800691e:	4628      	mov	r0, r5
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	f000 f838 	bl	8006998 <_malloc_usable_size_r>
 8006928:	4284      	cmp	r4, r0
 800692a:	4607      	mov	r7, r0
 800692c:	d802      	bhi.n	8006934 <_realloc_r+0x34>
 800692e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006932:	d812      	bhi.n	800695a <_realloc_r+0x5a>
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff ff6e 	bl	8006818 <_malloc_r>
 800693c:	4605      	mov	r5, r0
 800693e:	2800      	cmp	r0, #0
 8006940:	d0ed      	beq.n	800691e <_realloc_r+0x1e>
 8006942:	42bc      	cmp	r4, r7
 8006944:	4622      	mov	r2, r4
 8006946:	4631      	mov	r1, r6
 8006948:	bf28      	it	cs
 800694a:	463a      	movcs	r2, r7
 800694c:	f7ff fed0 	bl	80066f0 <memcpy>
 8006950:	4631      	mov	r1, r6
 8006952:	4640      	mov	r0, r8
 8006954:	f7ff fef4 	bl	8006740 <_free_r>
 8006958:	e7e1      	b.n	800691e <_realloc_r+0x1e>
 800695a:	4635      	mov	r5, r6
 800695c:	e7df      	b.n	800691e <_realloc_r+0x1e>
	...

08006960 <_sbrk_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d06      	ldr	r5, [pc, #24]	; (800697c <_sbrk_r+0x1c>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	f7fa fd64 	bl	8001438 <_sbrk>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_sbrk_r+0x1a>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_sbrk_r+0x1a>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	2000022c 	.word	0x2000022c

08006980 <__malloc_lock>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__malloc_lock+0x8>)
 8006982:	f000 b811 	b.w	80069a8 <__retarget_lock_acquire_recursive>
 8006986:	bf00      	nop
 8006988:	20000230 	.word	0x20000230

0800698c <__malloc_unlock>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__malloc_unlock+0x8>)
 800698e:	f000 b80c 	b.w	80069aa <__retarget_lock_release_recursive>
 8006992:	bf00      	nop
 8006994:	20000230 	.word	0x20000230

08006998 <_malloc_usable_size_r>:
 8006998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699c:	1f18      	subs	r0, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bfbc      	itt	lt
 80069a2:	580b      	ldrlt	r3, [r1, r0]
 80069a4:	18c0      	addlt	r0, r0, r3
 80069a6:	4770      	bx	lr

080069a8 <__retarget_lock_acquire_recursive>:
 80069a8:	4770      	bx	lr

080069aa <__retarget_lock_release_recursive>:
 80069aa:	4770      	bx	lr

080069ac <_init>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	bf00      	nop
 80069b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b2:	bc08      	pop	{r3}
 80069b4:	469e      	mov	lr, r3
 80069b6:	4770      	bx	lr

080069b8 <_fini>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr
